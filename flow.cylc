#!jinja2

{% set SITE = 'gfdl' %}
{% set PP_CHUNK_A_COUNT = (PP_CHUNK_A | duration_as('s') / HISTORY_SEGMENT | duration_as('s')) | int %}
{% set PP_CHUNK_B_COUNT = (PP_CHUNK_B | duration_as('s') / PP_CHUNK_A | duration_as('s')) | int %}

[meta]
    title = "Postprocessing Example 1"
    description = """
Postprocessing example that includes Bronx-like functionality,
and more (such as multiline descriptions!)
"""
    URL = https://gitlab.gfdl.noaa.gov/fre2/workflows/postprocessing

[scheduler]
    # Implicit tasks are tasks without explicit runtime definitions in [runtime], often typos
    allow implicit tasks = False
    # Configure the directories and files to be included in the remote file installation
    install = app/*, bin/*, etc/*, lib/*
    UTC mode = True

[task parameters]
    regrid =        {{ "regrid-xy" | form_task_parameters('temporal', PP_COMPONENTS) }}
    regrid_static = {{ "regrid-xy" | form_task_parameters('static', PP_COMPONENTS) }}
    native =        {{ "native" | form_task_parameters('temporal', PP_COMPONENTS) }}
    native_static = {{ "native" | form_task_parameters('static', PP_COMPONENTS) }}

[scheduling]
    initial cycle point = {{ PP_START }}
    final cycle point = {{ PP_STOP }}
    [[graph]]
        {{ HISTORY_SEGMENT }} = """
pp-starter => stage-history & stage-history-refined
stage-history-refined => stage-history-refined-link
stage-history & stage-history-refined-link => regrid-xy<regrid> => split-netcdf_regrid<regrid> => rename-split-to-pp_regrid<regrid>
{% if CLEAN_WORK %}
split-netcdf_regrid<regrid> => clean-history-regrid-xy
rename-split-to-pp_regrid<regrid> => clean-split-regrid-xy
{% endif %}
stage-history => split-netcdf_native<native> => rename-split-to-pp_native<native>
{% if CLEAN_WORK %}
rename-split-to-pp_native<native> => clean-split-native
{% endif %}
"""
        R1 = """
pp-starter => stage-history & stage-history-refined
stage-history-refined => stage-history-refined-link
stage-history & stage-history-refined-link => regrid-xy<regrid_static> => split-netcdf_regrid<regrid_static> => rename-split-to-pp_regrid<regrid_static>
{% if CLEAN_WORK %}
split-netcdf_regrid<regrid_static> => clean-history-regrid-xy
rename-split-to-pp_regrid<regrid_static> => clean-split-regrid-xy
{% endif %}
stage-history & stage-history-refined-link => split-netcdf_native<native_static> => rename-split-to-pp_native<native_static>
{% if CLEAN_WORK %}
rename-split-to-pp_native<native_static> => clean-split-native
{% endif %}
rename-split-to-pp_regrid<regrid_static> & rename-split-to-pp_native<native_static> => remap-pp-components-static
{% if CLEAN_WORK %}
remap-pp-components-static => clean-shards-static
remap-pp-components-static => combine-statics => clean-pp-statics
{% endif %}
"""
        +{{ PP_CHUNK_A }}/{{ PP_CHUNK_A }} = """
rename-split-to-pp_regrid<regrid>
{% for I in range(1, PP_CHUNK_A_COUNT) %}
& rename-split-to-pp_regrid<regrid>[{{ HISTORY_SEGMENT | multiply_duration(-I) }}]
{% endfor %}
=> make-timeseries_regrid-chunk1<regrid>
rename-split-to-pp_native<native>
{% for I in range(1, PP_CHUNK_A_COUNT) %}
& rename-split-to-pp_native<native>[{{ HISTORY_SEGMENT | multiply_duration(-I) }}]
{% endfor %}
=> make-timeseries_native-chunk1<native>
make-timeseries_regrid-chunk1<regrid> & make-timeseries_native-chunk1<native> => remap-pp-components-chunk1
{% if CLEAN_WORK %}
make-timeseries_regrid-chunk1<regrid> & make-timeseries_native-chunk1<native> => clean-shards-chunk0
{% endif %}
"""
        +{{ PP_CHUNK_B }}/{{ PP_CHUNK_B }} = """
make-timeseries_regrid-chunk1<regrid>
{% for I in range(1, PP_CHUNK_B_COUNT) %}
make-timeseries_regrid-chunk1<regrid>[{{ PP_CHUNK_A | multiply_duration(-I)}}]
{% endfor %}
=> make-timeseries_regrid-chunk2<regrid>
make-timeseries_native-chunk1<native>
{% for I in range(1, PP_CHUNK_B_COUNT) %}
make-timeseries_native-chunk1<native>[-{{ PP_CHUNK_A }}]
{% endfor %}
=> make-timeseries_native-chunk2<native>
make-timeseries_regrid-chunk2<regrid> & make-timeseries_native-chunk2<native> => remap-pp-components-chunk2
{% if CLEAN_WORK %}
make-timeseries_regrid-chunk2<regrid> & make-timeseries_native-chunk2<native> => clean-shards-chunk1
remap-pp-components-chunk2 => clean-shards-chunk2
{% endif %}
{% if DO_MDTF %}
remap-pp-components-chunk2 => mdtf
{% endif %}
"""

[runtime]
    # default config for all tasks
    [[root]]
        init-script = """
            module load epmt
            module list
            epmt check
"""
        env-script = """
            eval $(rose task-env)
            env
"""
        script = rose task-run --verbose
        # retries don't make sense yet while testing as they will just delay the failures
        #execution retry delays = PT1M, PT5M, PT10M
        [[[events]]]
            mail events = startup shutdown aborted timeout stalled inactivity
            submission timeout = P1D

    [[pp-starter]]
        [[[environment]]]
            targetFile = {{ HISTORY_DIR }}/YYYYMMDD.nc.tar

    [[STAGE-HISTORY]]
        pre-script = module load gcp hsm/test
        [[[directives]]]
            --time=8:00:00
    [[stage-history]]
        inherit = STAGE-HISTORY
        [[[environment]]]
            historyDir = {{ HISTORY_DIR }}
            ptmpDir = {{ PTMP_DIR }}
    [[stage-history-refined]]
        inherit = STAGE-HISTORY
        script = rose task-run --verbose --app-key stage-history
        [[[environment]]]
            historyDir = {{ HISTORY_DIR }}_refineDiag
            ptmpDir = {{ PTMP_DIR }}

    [[stage-history-refined-link]]
        pre-script = "set -x"
        script = """
            cd {{ PTMP_DIR }}/{{ HISTORY_DIR }}/$(cylc date --template CCYYMMDD).nc
            ln -f ../../history_refineDiag/$(cylc date --template CCYYMMDD).nc/*.nc .
        """

    [[SPLIT-NETCDF]]
        pre-script = module load cdo nco && mkdir -p $outputDir
        script = rose task-run --verbose --app-key split-netcdf
        [[[environment]]]
            date = $CYLC_TASK_CYCLE_POINT
    [[SPLIT-NETCDF-NATIVE]]
        inherit = SPLIT-NETCDF
        [[[environment]]]
            inputDir = {{ PTMP_DIR }}/{{ HISTORY_DIR }}/$(cylc date --template CCYYMMDD).nc
            outputDir = $CYLC_WORKFLOW_SHARE_DIR/split/native/$CYLC_TASK_CYCLE_POINT
            component = $CYLC_TASK_PARAM_native
    [[SPLIT-NETCDF-REGRID]]
        inherit = SPLIT-NETCDF
        [[[environment]]]
            inputDir = $CYLC_WORKFLOW_SHARE_DIR/history/regrid-xy/$CYLC_TASK_CYCLE_POINT
            outputDir = $CYLC_WORKFLOW_SHARE_DIR/split/regrid-xy/$CYLC_TASK_CYCLE_POINT
            component = $CYLC_TASK_PARAM_regrid
    [[split-netcdf_native<native>]]
        inherit = SPLIT-NETCDF-NATIVE
    [[split-netcdf_native<native_static>]]
        inherit = SPLIT-NETCDF-NATIVE
        [[[environment]]]
            component = $CYLC_TASK_PARAM_native_static
    [[split-netcdf_regrid<regrid>]]
        inherit = SPLIT-NETCDF-REGRID
    [[split-netcdf_regrid<regrid_static>]]
        inherit = SPLIT-NETCDF-REGRID
        [[[environment]]]
            component = $CYLC_TASK_PARAM_regrid_static

    [[RENAME-SPLIT-TO-PP]]
        pre-script = module load netcdf-c cdo && mkdir -p $outputDir
        script = rose task-run --verbose --app-key rename-split-to-pp
    [[RENAME-SPLIT-TO-PP-NATIVE]]
        inherit = RENAME-SPLIT-TO-PP
        [[[environment]]]
            inputDir = $CYLC_WORKFLOW_SHARE_DIR/split/native/$CYLC_TASK_CYCLE_POINT
            outputDir = $CYLC_WORKFLOW_SHARE_DIR/shards/native
            component = $CYLC_TASK_PARAM_native
    [[RENAME-SPLIT-TO-PP-REGRID]]
        inherit = RENAME-SPLIT-TO-PP
        [[[environment]]]
            inputDir = $CYLC_WORKFLOW_SHARE_DIR/split/regrid-xy/$CYLC_TASK_CYCLE_POINT
            outputDir = $CYLC_WORKFLOW_SHARE_DIR/shards/regrid-xy
            component = $CYLC_TASK_PARAM_regrid
    [[rename-split-to-pp_native<native>]]
        inherit = RENAME-SPLIT-TO-PP-NATIVE
    [[rename-split-to-pp_native<native_static>]]
        inherit = RENAME-SPLIT-TO-PP-NATIVE
        [[[environment]]]
            component = $CYLC_TASK_PARAM_native_static
    [[rename-split-to-pp_regrid<regrid>]]
        inherit = RENAME-SPLIT-TO-PP-REGRID
    [[rename-split-to-pp_regrid<regrid_static>]]
        inherit = RENAME-SPLIT-TO-PP-REGRID
        [[[environment]]]
            component = $CYLC_TASK_PARAM_regrid_static

    [[REMAP-PP-COMPONENTS]]
        pre-script = module load cdo gcp/test && mkdir -p $outputDir
        script = rose task-run --verbose --app-key remap-pp-components
        [[[environment]]]
            inputDir = $CYLC_WORKFLOW_SHARE_DIR/shards
            outputDir = {{ PP_DIR }}
            outputDRS = legacy
    [[remap-pp-components-chunk1]]
        inherit = REMAP-PP-COMPONENTS
        [[[environment]]]
            begin = $(cylc date --offset=-{{ HISTORY_SEGMENT }})
            currentChunk = {{ PP_CHUNK_A }}
    [[remap-pp-components-chunk2]]
        inherit = REMAP-PP-COMPONENTS
        [[[environment]]]
            begin = $(cylc date --offset=-P3Y)
            currentChunk = {{ PP_CHUNK_B }}
    [[remap-pp-components-static]]
        inherit = REMAP-PP-COMPONENTS
        [[[environment]]]
            begin = $CYLC_TASK_CYCLE_POINT
            currentChunk = P0Y
            outputDir = $CYLC_WORKFLOW_SHARE_DIR/pp
            outputDRS = default

    [[MAKE-TIMESERIES]]
        pre-script = module load cdo && mkdir -p $outputDir
        script = rose task-run --verbose --app-key make-timeseries
        [[[environment]]]
            fail_ok_components = grid_spec lumip_Lyr_psl
    [[MAKE-TIMESERIES-NATIVE]]
        [[[environment]]]
            inputDir = $CYLC_WORKFLOW_SHARE_DIR/shards/native
            outputDir = $CYLC_WORKFLOW_SHARE_DIR/shards/native
            component = $CYLC_TASK_PARAM_native
    [[MAKE-TIMESERIES-REGRID]]
        [[[environment]]]
            inputDir = $CYLC_WORKFLOW_SHARE_DIR/shards/regrid-xy
            outputDir = $CYLC_WORKFLOW_SHARE_DIR/shards/regrid-xy
            component = $CYLC_TASK_PARAM_regrid
    [[MAKE-TIMESERIES-CHUNK1]]
        [[[environment]]]
            begin = $(cylc date --offset=-{{ HISTORY_SEGMENT }})
            inputChunk = {{ HISTORY_SEGMENT }}
            outputChunk = {{ PP_CHUNK_A }}
    [[MAKE-TIMESERIES-CHUNK2]]
        [[[environment]]]
            begin = $(cylc date --offset=-P3Y)
            inputChunk = {{ PP_CHUNK_A }}
            outputChunk = {{ PP_CHUNK_B }}
    [[MAKE-TIMESERIES-NATIVE-CHUNK1]]
        inherit = MAKE-TIMESERIES, MAKE-TIMESERIES-NATIVE, MAKE-TIMESERIES-CHUNK1
    [[make-timeseries_native-chunk1<native>]]
        inherit = MAKE-TIMESERIES-NATIVE-CHUNK1
    [[MAKE-TIMESERIES-REGRID-CHUNK1]]
        inherit = MAKE-TIMESERIES, MAKE-TIMESERIES-REGRID, MAKE-TIMESERIES-CHUNK1
    [[make-timeseries_regrid-chunk1<regrid>]]
        inherit = MAKE-TIMESERIES-REGRID-CHUNK1
    [[MAKE-TIMESERIES-NATIVE-chunk2]]
        inherit = MAKE-TIMESERIES, MAKE-TIMESERIES-NATIVE, MAKE-TIMESERIES-CHUNK2
    [[make-timeseries_native-chunk2<native>]]
        inherit = MAKE-TIMESERIES-NATIVE-chunk2
    [[MAKE-TIMESERIES-REGRID-chunk2]]
        inherit = MAKE-TIMESERIES, MAKE-TIMESERIES-REGRID, MAKE-TIMESERIES-CHUNK2
    [[make-timeseries_regrid-chunk2<regrid>]]
        inherit = MAKE-TIMESERIES-REGRID-chunk2

    [[REGRID-XY]]
        pre-script = module load fre/test && mkdir -p $outputDir
        script = rose task-run --verbose --app-key regrid-xy
        [[[environment]]]
            inputDir = {{ PTMP_DIR }}/{{ HISTORY_DIR }}/$(cylc date --template CCYYMMDD).nc
            outputDir = $CYLC_WORKFLOW_SHARE_DIR/history/regrid-xy/$CYLC_TASK_CYCLE_POINT
            begin = $CYLC_TASK_CYCLE_POINT
            fregridRemapDir = $CYLC_WORKFLOW_SHARE_DIR/fregrid-remap-files
            component = $CYLC_TASK_PARAM_regrid
    [[regrid-xy<regrid>]]
        inherit = REGRID-XY
    [[regrid-xy<regrid_static>]]
        inherit = REGRID-XY
        [[[environment]]]
            component = $CYLC_TASK_PARAM_regrid_static

    [[combine-statics]]
        pre-script = module load cdo && mkdir -p $outputDir
        [[[environment]]]
            inputDir = $CYLC_WORKFLOW_SHARE_DIR/pp
            outputDir = {{ PP_DIR }}

    [[mdtf]]
        pre-script = mkdir -p $MDTF_TMPDIR
        [[[environment]]]
            MDTF_TMPDIR = $CYLC_WORKFLOW_SHARE_DIR/mdtf

    [[CLEAN]]
        pre-script = "set -x"
    [[clean-history-regrid-xy]]
        inherit = CLEAN
        script = "rm -rf $CYLC_WORKFLOW_SHARE_DIR/history/regrid-xy/$CYLC_TASK_CYCLE_POINT"
    [[clean-pp-statics]]
        inherit = CLEAN
        script = "rm -rf $CYLC_WORKFLOW_SHARE_DIR/pp"
    [[clean-split-native]]
        inherit = CLEAN
        script = "rm -rf $CYLC_WORKFLOW_SHARE_DIR/split/native/$CYLC_TASK_CYCLE_POINT"
    [[clean-split-regrid-xy]]
        inherit = CLEAN
        script = "rm -rf $CYLC_WORKFLOW_SHARE_DIR/split/regrid-xy/$CYLC_TASK_CYCLE_POINT"
    [[clean-shards-static]]
        inherit = CLEAN
        script = "rm -rf $CYLC_WORKFLOW_SHARE_DIR/shards/*/*/P0Y"
    [[clean-shards-chunk0]]
        inherit = CLEAN
        script = """
            find $CYLC_WORKFLOW_SHARE_DIR/shards/*/*/*/{{ HISTORY_SEGMENT }} -type f -name "*.*-$(cylc date --template CCYY)*.nc" -delete
            find $CYLC_WORKFLOW_SHARE_DIR/shards/*/*/*/{{ HISTORY_SEGMENT }} -type f -name "*.*-$(cylc date --template CCYY --offset=-{{ HISTORY_SEGMENT }})*.nc" -delete
        """
    [[clean-shards-chunk1]]
        inherit = CLEAN
        script = """
            find $CYLC_WORKFLOW_SHARE_DIR/shards/*/*/*/{{ PP_CHUNK_A }} -type f -name "*.*-$(cylc date --template CCYY)*.nc" -delete
            find $CYLC_WORKFLOW_SHARE_DIR/shards/*/*/*/{{ PP_CHUNK_A }} -type f -name "*.*-$(cylc date --template CCYY --offset=-{{ PP_CHUNK_A }})*.nc" -delete
        """
    [[clean-shards-chunk2]]
        inherit = CLEAN
        script = """
            find $CYLC_WORKFLOW_SHARE_DIR/shards/*/*/*/{{ PP_CHUNK_B }} -type f -name "*.*-$(cylc date --template CCYY)*.nc" -delete
        """

# Site-specific settings
{% include 'site/' ~ SITE ~ '.cylc' %}
