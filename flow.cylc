#!jinja2

# Store site-specific flow.cylc configuration in a site/ subdirectory.
# The site-specific file is included at the end of this file.
# (Probably, we should use similar mechanisms where sensible, e.g. for shared items among workflows)
# Jinja code between single brackets is run.
# Jinja code with two brackets is printed.
# The single bracket form can be commented: {# code #}
{% set SITE = 'gfdl' %}
# Calculate the number of history segments per chunk-a
{% set PP_CHUNK_A_COUNT = (PP_CHUNK_A | duration_as('s') / HISTORY_SEGMENT | duration_as('s')) | int %}
# Calculate the number of chunk-a chunks per chunk-b
{% set PP_CHUNK_B_COUNT = (PP_CHUNK_B | duration_as('s') / PP_CHUNK_A | duration_as('s')) | int %}

[meta]
    title = "Postprocessing Example 1"
    description = """
Postprocessing example that includes Bronx-like functionality,
"""
    URL = https://gitlab.gfdl.noaa.gov/fre2/workflows/postprocessing

[scheduler]
    # Implicit tasks are tasks without explicit runtime definitions in [runtime], often typos.
    # (For prototyping and graphing, change this to True.)
    allow implicit tasks = False
    # Configure the directories and files to be included in the remote file installation
    install = app/*, bin/*, etc/*, lib/*
    UTC mode = True

[task parameters]
# The task parameters (except for component) depend on configuration in Rose apps,
# so custom Jinja triggers are used to form the lists. Cylc and custom Jinja triggers have these rules:
# 1. Triggers live in Jinja2Filters/ and must be python
# 2. The trigger filename must be <trigger-name>.py
# 3. In the file, trigger must be defined as a function with the same name
# 4. First argument is passed through as a pipe, and the rest are passed through in the trigger arguments.
# More info:
# The python loaded within Cylc has access to some useful Cylc utilities (e.g. metomi.isodatetime.parsers).
# For development/testing, use "module load conda; conda activate cylc". Then the Cylc python will be loaded.
    regrid =        {{ "regrid-xy" | form_task_parameters('temporal', PP_COMPONENTS, CONFIG_COMPS) }}
    regrid_static = {{ "regrid-xy" | form_task_parameters('static', PP_COMPONENTS, CONFIG_COMPS) }}
    native =        {{ "native" | form_task_parameters('temporal', PP_COMPONENTS, CONFIG_COMPS) }}
    native_static = {{ "native" | form_task_parameters('static', PP_COMPONENTS, CONFIG_COMPS) }}
    # Standard Jinja2 triggers are also available (e.g. "replace")
    component  =    {{ PP_COMPONENTS | replace(' ', ', ') }}

[scheduling]
    initial cycle point = {{ PP_START }}
    final cycle point = {{ PP_STOP }}
    [[graph]]
        # Graph strings are organized by recurrence interval-- when to run the tasks.
        # Currently, we use 4 intervals: every history-file segment, once (for statics),
        # every chunk-a, and every chunk-b.


        #
        # Recurrence interval: every history-file segment
        #
        {{ HISTORY_SEGMENT }} = """
# Within a recurrence interval, task dependencies are specified with => (depends on), & (and), and | (or).
# Tasks in a dependency can be single tasks, task families (by convention, in all caps),
# or "ensembles" expanded by the parameters above.
# All tasks in the STAGE-HISTORY family (staging history and staging history-refined) are started
# once the pp-starter task succeeds.
pp-starter => STAGE-HISTORY
# Jinja is useful to include or exclude parts of the configuration. In this case, the lines between
# if DO_REFINEDIAG and endif are used or not used, depending on the value of DO_REFINEDIAG (in rose-suite.conf).
# All template variables in rose-suite.conf are available as Jinja variables.
# If refineDiag generation is desired (DO_REFINEDIAG is True), then add these two task dependencies:
# 1. All tasks in the REFINE-DIAG task family are started once the stage-history task succeeds.
# 2. stage-history-refined task is started once all the refineDiag tasks succeed.
{% if DO_REFINEDIAG %}
stage-history => REFINE-DIAG
REFINE-DIAG:succeed-all => stage-history-refined
{% endif %}
# If preAnalysis is desired (vitals calculations is the canonical case), then start all PRE-ANALYSIS tasks
# once the stage-history task succeeds.
{% if DO_PREANALYSIS %}
stage-history => PRE-ANALYSIS
{% endif %}
# If task families are on the left side of the => then a qualifier must be used (e.g. :succeed-all)
# The angle brackets define the "ensemble" axis, the task paramaters defined above.
# The next two lines set the major processing for the native and regrid (horizontal regridding) lists of history files.
# Each history file to be regridded should be regridded once staging is done; then should be split and cataloged
# (into a standard shards directory set by ISO8601 frequencies and chunks).
# Each history file needed for native grid processing is similar, except skipping the regridding.
STAGE-HISTORY:succeed-all => regrid-xy<regrid> => split-netcdf-regrid<regrid> => rename-split-to-pp-regrid<regrid>
STAGE-HISTORY:succeed-all =>                      split-netcdf-native<native> => rename-split-to-pp-native<native>
# If HISTORY_DIR_REFINED is set, then use the next 3 lines.
# After all staging is done, then hard link the refined history files to the history file location (not a great solution).
# Regridding and splitting native history files should not start until the history-refined output is available.
{% if HISTORY_DIR_REFINED is defined %}
STAGE-HISTORY:succeed-all  => stage-history-refined-link
stage-history-refined-link => regrid-xy<regrid>
stage-history-refined-link => split-netcdf-native<native>
{% endif %}
# If work-dir cleaning is desired, then remove what should now be safe to remove.
# Once regridded history files are split, then the regridded history files can be removed.
# Once the split (regridded and native) files are cataloged, then the (not-cataloged) split files can be removed.
{% if CLEAN_WORK %}
split-netcdf-regrid<regrid>       => clean-history-regrid-xy
rename-split-to-pp-regrid<regrid> => clean-split-regrid-xy
rename-split-to-pp-native<native> => clean-split-native
{% endif %}
"""


        #
        # Recurrence interval: run only once
        #
        # The R1 interval is a special interval that runs only once, so it's useful for statics.
        R1 = """
# The static processing is similar to the "every history segment" processing, except uses different history file lists.
pp-starter => STAGE-HISTORY
STAGE-HISTORY:succeed-all => regrid-xy<regrid_static> => split-netcdf-regrid<regrid_static> => rename-split-to-pp-regrid<regrid_static>
STAGE-HISTORY:succeed-all =>                             split-netcdf-native<native_static> => rename-split-to-pp-native<native_static>
# After cataloging the regridded and native statics, remap them to pp components as desired
rename-split-to-pp-regrid<regrid_static> & rename-split-to-pp-native<native_static> => remap-pp-components-static => combine-statics
# Similarly, if the history-refined is used, then don't process until the history-refined staging is done.
{% if HISTORY_DIR_REFINED is defined %}
STAGE-HISTORY:succeed-all => stage-history-refined-link
stage-history-refined-link => regrid-xy<regrid_static>
stage-history-refined-link => split-netcdf-native<native_static>
{% endif %}
# If work-dir cleaning is set, then remove what should now be safe to remove.
{% if CLEAN_WORK %}
split-netcdf-regrid<regrid_static> => clean-history-regrid-xy
rename-split-to-pp-regrid<regrid_static> => clean-split-regrid-xy
rename-split-to-pp-native<native_static> => clean-split-native
remap-pp-components-static => clean-shards-static
combine-statics => clean-pp-statics
{% endif %}
"""


        #
        # Recurrence interval: every CHUNK-A
        #
        # Run the tasks to process CHUNK-A every CHUNK-A, starting after CHUNK-A time
        +{{ PP_CHUNK_A | subtract_durations(HISTORY_SEGMENT) }}/{{ PP_CHUNK_A }} = """
# Tasks can be split over multiple lines if the subsequent ones begin with =>, &, or |
# The make-timeseries tasks for CHUNK-A depend on all segment processing for the time period succeeding.
# This Jinja for loop expands to do this.
rename-split-to-pp-regrid<regrid>
{% for I in range(1, PP_CHUNK_A_COUNT) %}
& rename-split-to-pp-regrid<regrid>[{{ HISTORY_SEGMENT | multiply_duration(-I) }}]
{% endfor %}
=> make-timeseries-regrid-{{ PP_CHUNK_A }}<regrid>
rename-split-to-pp-native<native>
{% for I in range(1, PP_CHUNK_A_COUNT) %}
& rename-split-to-pp-native<native>[{{ HISTORY_SEGMENT | multiply_duration(-I) }}]
{% endfor %}
=> make-timeseries-native-{{ PP_CHUNK_A }}<native>

# Generate the per-component make-timeseries => remap-pp-component tasks using Jinja trigger form_remap_dep
#Throw cylc validate exceptions if PP_CHUNK_A is not in rose-app.conf
{% set form_remap_dep_PP_CHUNK_A_regrid  =  "regrid-xy" | form_remap_dep('temporal', PP_CHUNK_A, PP_COMPONENTS, CONFIG_COMPS) %}
{{ form_remap_dep_PP_CHUNK_A_regrid }}
{% if form_remap_dep_PP_CHUNK_A_regrid == "" %}
{{ raise("You configured a PP chunk, but no corresponding PP requests were found in app/remap-pp-component/rose-app.conf; please check PP_CHUNK_A in rose-suite.conf") }}   
{% endif %}
{{  form_remap_dep_PP_CHUNK_A_regrid  }}

{% set form_remap_dep_PP_CHUNK_A_native  =  "native" | form_remap_dep('temporal', PP_CHUNK_A, PP_COMPONENTS, CONFIG_COMPS) %}
{% if form_remap_dep_PP_CHUNK_A_native == "" %}
{{ raise("You configured a PP chunk, but no corresponding PP requests were found in app/remap-pp-component/rose-app.conf; please check PP_CHUNK_A in rose-suite.conf") }}
{% endif %}
{{  form_remap_dep_PP_CHUNK_A_native  }}

# If work-dir cleaning is desired, and CHUNK-A is larger than the history segment, then remove the (prerequisite) history segment shards.
# However, if CHUNK-A is identical to the history segment, then do not remove the shards, as they haven't be saved (remapped) yet.
{% if CLEAN_WORK and PP_CHUNK_A != HISTORY_SEGMENT %}
make-timeseries-regrid-{{ PP_CHUNK_A }}<regrid> & make-timeseries-native-{{ PP_CHUNK_A }}<native> & REMAP-PP-COMPONENTS-{{ PP_CHUNK_A }}:succeed-all => clean-shards-{{ HISTORY_SEGMENT }}
# If only one pp chunk is used (CHUNK-B is equal to CHUNK-A), then remove the CHUNK-A shards after saving (remapping).
# In the usual case where CHUNK-B is larger than CHUNK-A, do not remove CHUNK-A shards yet as they will be used in CHUNK-B processing.
{% if PP_CHUNK_B_COUNT == 1 %}
REMAP-PP-COMPONENTS-{{ PP_CHUNK_A }}:succeed-all => clean-shards-{{ PP_CHUNK_A }}
{% endif %}
{% endif %}
# If MDTF is requested, then run it after all pp components have finished
{% if DO_MDTF %}
REMAP-PP-COMPONENTS-{{ PP_CHUNK_A }}:succeed-all => mdtf
{% endif %}
"""


#
# Recurrence interval: every CHUNK-B
#
# If only one pp chunk is used, then skip the CHUNK-B processing.
{% if PP_CHUNK_B_COUNT > 1 %}
        # Run the tasks to process CHUNK-B every CHUNK-B, starting after CHUNK-B time
        +{{ PP_CHUNK_B | subtract_durations(HISTORY_SEGMENT) }}/{{ PP_CHUNK_B }} = """
# The make-timeseries tasks for CHUNK-B depend on all CHUNK-A processing for the time period succeeding.
make-timeseries-regrid-{{ PP_CHUNK_A }}<regrid>
{% for I in range(1, PP_CHUNK_B_COUNT) %}
& make-timeseries-regrid-{{ PP_CHUNK_A }}<regrid>[{{ PP_CHUNK_A | multiply_duration(-I)}}]
{% endfor %}
=> make-timeseries-regrid-{{ PP_CHUNK_B }}<regrid>
make-timeseries-native-{{ PP_CHUNK_A }}<native>
{% for I in range(1, PP_CHUNK_B_COUNT) %}
& make-timeseries-native-{{ PP_CHUNK_A }}<native>[{{ PP_CHUNK_A | multiply_duration(-I)}}]
{% endfor %}
=> make-timeseries-native-{{ PP_CHUNK_B }}<native>

# Generate the per-component make-timeseries => remap-pp-component tasks using Jinja trigger form_remap_dep
######Throw validation exception if PP_CHUNK_B is not in rose-app.conf
{% set form_remap_dep_PP_CHUNK_B_regrid  =  "regrid-xy" | form_remap_dep('temporal', PP_CHUNK_B, PP_COMPONENTS, CONFIG_COMPS) %}
 
{% if form_remap_dep_PP_CHUNK_B_regrid == "" %}
{{ raise("You configured a second PP chunk, but no corresponding PP requests were found in app/remap-pp-component/rose-app.conf; please remove the CHUNK-B setting or set CHUNK-B to CHUNK-A") }} 
{% endif %}  
{{ form_remap_dep_PP_CHUNK_B_regrid }}

{% set form_remap_dep_PP_CHUNK_B_native  =  "native" | form_remap_dep('temporal', PP_CHUNK_B, PP_COMPONENTS, CONFIG_COMPS) %}

{% if form_remap_dep_PP_CHUNK_B_native == "" %}
{{ raise("You configured a second PP chunk, but no corresponding PP requests were found in app/remap-pp-component/rose-app.conf; please remove the CHUNK-B setting or set CHUNK-B to CHUNK-A") }}
{% endif %}
 
{{ form_remap_dep_PP_CHUNK_B_native }}

# If work-dir cleaning is desired, remove CHUNK-A shards once CHUNK-B timeseries are created,
# and remove CHUNK-B shards once the final products are saved.
{% if CLEAN_WORK %}
make-timeseries-regrid-{{ PP_CHUNK_B }}<regrid> & make-timeseries-native-{{ PP_CHUNK_B }}<native> => clean-shards-{{ PP_CHUNK_A }}
REMAP-PP-COMPONENTS-{{ PP_CHUNK_B }}:succeed-all => clean-shards-{{ PP_CHUNK_B }}
{% endif %}
"""
{% endif %}

[runtime]
    # default config for all tasks
    [[root]]
        init-script = """
            module load epmt
            module list
            epmt check
"""
        env-script = """
            eval $(rose task-env)
            env
"""
        script = rose task-run --verbose
        # retries don't make sense yet while testing as they will just delay the failures
        #execution retry delays = PT1M, PT5M, PT10M
        [[[directives]]]
            --time=1:00:00
        [[[events]]]
            mail events = startup shutdown aborted timeout stalled inactivity
            submission timeout = P1D

    [[pp-starter]]
        [[[environment]]]
            targetFile = {{ HISTORY_DIR }}/YYYYMMDD.nc.tar

    [[STAGE-HISTORY]]
        pre-script = module load gcp hsm/test
        [[[directives]]]
            --time=8:00:00
    [[stage-history]]
        inherit = STAGE-HISTORY
        [[[environment]]]
            historyDir = {{ HISTORY_DIR }}
            ptmpDir = {{ PTMP_DIR }}
{% if HISTORY_DIR_REFINED is defined %}
    [[stage-history-refined]]
        inherit = STAGE-HISTORY
        script = rose task-run --verbose --app-key stage-history
        post-script = """
        """
        [[[environment]]]
            historyDir = {{ HISTORY_DIR_REFINED }}
            ptmpDir = {{ PTMP_DIR }}
    [[stage-history-refined-link]]
        script = """
            # a disagreemable workaround to use PTMP as a data input location
            # assumes no name collisions, and pollutes PTMP
            set -x
            cd {{ PTMP_DIR }}/{{ HISTORY_DIR }}/$(cylc date --template CCYYMMDD).nc
            ln -f {{ PTMP_DIR }}/{{ HISTORY_DIR_REFINED }}/$(cylc date --template CCYYMMDD).nc/*.nc .
        """
{% endif %}

{% if DO_REFINEDIAG or DO_PREANALYSIS %}
    [[PRE-ANALYSIS]]
        pre-script = """
            env
            set -x
            module load gcp/test
            module load fre/test
            mkdir -p $work $tempCache $refineDiagDir
            hsmget -v -t -a $histDir -p {{ PTMP_DIR }}/$histDir -w $work $hsmdate\/*
            cd $work/$hsmdate
            ls
        """
        [[[environment]]]
            name = {{ EXPERIMENT }}
            rtsxml = no-more-xml
            work = $TMPDIR/work
            tempCache = $TMPDIR/tempCache
            root = $CYLC_WORKFLOW_RUN_DIR
            archive = is-this-needed
            scriptName = $CYLC_TASK_LOG_DIR/job
            oname = $(cylc date --template CCYYMMDD)
            hsmdate = $oname.nc
            ptmpDir = {{ PTMP_DIR }}/{{ HISTORY_DIR }}
            histDir = {{ HISTORY_DIR }}
            platform = {{ PLATFORM }}
            target = {{ TARGET }}
            segment_months = {{ HISTORY_SEGMENT }}
            basedate = is-this-needed
            gridspec = {{ GRID_SPEC }}
            refineDiagDir = $TMPDIR/history_refineDiag/$hsmdate
{% endif %}
{% if DO_REFINEDIAG %}
    [[REFINE-DIAG]]
        inherit = PRE-ANALYSIS
        post-script = """
            cd $refineDiagDir
            if ls *nc; then
                refinedCount=$(ls -1 *nc | wc -l)
            else
                refinedCount=0
            fi
            if [[ $refinedCount > 0 ]]; then
                for file in $(ls -1 *nc); do
                    list_ncvars.csh -st01234 $file |& tee $CYLC_WORKFLOW_SHARE_DIR/refineDiag.log
                done
            else
                echo ERROR: RefineDiag script did not create any NetCDF files as it was expected to do
                exit 1
            fi
            if [[ -f {{ HISTORY_DIR_REFINED }}/$oname.nc.tar ]]; then
                hsmget -v -t -a {{ HISTORY_DIR_REFINED }} -p {{ PTMP_DIR }}/{{ HISTORY_DIR_REFINED }} -w $TMPDIR/modify_refineDiag $hsmdate/\*
                mv -f * $TMPDIR/modify_refineDiag
                mv -f $TMPDIR/modify_refineDiag/* .
                rm -rf $TMPDIR/modify_refineDiag
            fi
            hsmput -v -t -s tar -a {{ HISTORY_DIR_REFINED }} -p {{ PTMP_DIR }}/{{ HISTORY_DIR_REFINED }} -w $TMPDIR/history_refineDiag $hsmdate
        """
    [[refineDiag-{{ REFINEDIAG_NAME }}]]
        inherit = REFINE-DIAG
        script = """
            ls
            echo NOTE: About to source user script
            if csh {{ REFINEDIAG_SCRIPT }}; then
                echo NOTE: User script exited normally
            else
                echo ERROR: User script got an error status $?
                exit 1
            fi
        """
{% endif %}
{% if DO_PREANALYSIS and PREANALYSIS_NAME is defined and PREANALYSIS_SCRIPT is defined %}
    [[preAnalysis-{{ PREANALYSIS_NAME }}]]
        inherit = PRE-ANALYSIS
        script = """
            ls
            echo NOTE: About to source user script
            if csh {{ PREANALYSIS_SCRIPT }}; then
                echo NOTE: User script exited normally
            else
                echo ERROR: User script got an error status $?
                exit 1
            fi
        """
{% endif %}

    [[SPLIT-NETCDF]]
        pre-script = module load cdo nco && mkdir -p $outputDir
        script = rose task-run --verbose --app-key split-netcdf
        [[[environment]]]
            date = $CYLC_TASK_CYCLE_POINT
    [[SPLIT-NETCDF-NATIVE]]
        inherit = SPLIT-NETCDF
        [[[environment]]]
            inputDir = {{ PTMP_DIR }}/{{ HISTORY_DIR }}/$(cylc date --template CCYYMMDD).nc
            outputDir = $CYLC_WORKFLOW_SHARE_DIR/cycle/$CYLC_TASK_CYCLE_POINT/split/native
            component = $CYLC_TASK_PARAM_native
    [[SPLIT-NETCDF-REGRID]]
        inherit = SPLIT-NETCDF
        [[[environment]]]
            inputDir = $CYLC_WORKFLOW_SHARE_DIR/cycle/$CYLC_TASK_CYCLE_POINT/history/regrid-xy
            outputDir = $CYLC_WORKFLOW_SHARE_DIR/cycle/$CYLC_TASK_CYCLE_POINT/split/regrid-xy
            component = $CYLC_TASK_PARAM_regrid
            use_subdirs = 1
    [[split-netcdf-native<native>]]
        inherit = SPLIT-NETCDF-NATIVE
    [[split-netcdf-native<native_static>]]
        inherit = SPLIT-NETCDF-NATIVE
        [[[environment]]]
            component = $CYLC_TASK_PARAM_native_static
    [[split-netcdf-regrid<regrid>]]
        inherit = SPLIT-NETCDF-REGRID
    [[split-netcdf-regrid<regrid_static>]]
        inherit = SPLIT-NETCDF-REGRID
        [[[environment]]]
            component = $CYLC_TASK_PARAM_regrid_static

    [[RENAME-SPLIT-TO-PP]]
        pre-script = module load netcdf-c cdo && mkdir -p $outputDir
        script = rose task-run --verbose --app-key rename-split-to-pp
    [[RENAME-SPLIT-TO-PP-NATIVE]]
        inherit = RENAME-SPLIT-TO-PP
        [[[environment]]]
            inputDir = $CYLC_WORKFLOW_SHARE_DIR/cycle/$CYLC_TASK_CYCLE_POINT/split/native
            outputDir = $CYLC_WORKFLOW_SHARE_DIR/shards/native
            component = $CYLC_TASK_PARAM_native
    [[RENAME-SPLIT-TO-PP-REGRID]]
        inherit = RENAME-SPLIT-TO-PP
        [[[environment]]]
            inputDir = $CYLC_WORKFLOW_SHARE_DIR/cycle/$CYLC_TASK_CYCLE_POINT/split/regrid-xy
            outputDir = $CYLC_WORKFLOW_SHARE_DIR/shards/regrid-xy
            component = $CYLC_TASK_PARAM_regrid
            use_subdirs = 1
    [[rename-split-to-pp-native<native>]]
        inherit = RENAME-SPLIT-TO-PP-NATIVE
    [[rename-split-to-pp-native<native_static>]]
        inherit = RENAME-SPLIT-TO-PP-NATIVE
        [[[environment]]]
            component = $CYLC_TASK_PARAM_native_static
    [[rename-split-to-pp-regrid<regrid>]]
        inherit = RENAME-SPLIT-TO-PP-REGRID
    [[rename-split-to-pp-regrid<regrid_static>]]
        inherit = RENAME-SPLIT-TO-PP-REGRID
        [[[environment]]]
            component = $CYLC_TASK_PARAM_regrid_static

    [[REMAP-PP-COMPONENTS]]
        pre-script = module load cdo gcp/test && mkdir -p $outputDir
        script = rose task-run --verbose --app-key remap-pp-components
        [[[directives]]]
            --time=8:00:00
        [[[environment]]]
            inputDir = $CYLC_WORKFLOW_SHARE_DIR/shards
            outputDir = {{ PP_DIR }}
            component = $CYLC_TASK_PARAM_component
            ROSE_APP_OPT_CONF_KEYS = {{ CONFIG_COMPS }}
    [[REMAP-PP-COMPONENTS-{{ PP_CHUNK_A }}]]
        inherit = REMAP-PP-COMPONENTS
        [[[environment]]]
            begin = $(cylc date --offset=-{{ PP_CHUNK_A | subtract_durations(HISTORY_SEGMENT) }})
            currentChunk = {{ PP_CHUNK_A }}
    [[remap-pp-components-{{ PP_CHUNK_A }}<component>]]
        inherit = REMAP-PP-COMPONENTS-{{ PP_CHUNK_A }}
    [[REMAP-PP-COMPONENTS-{{ PP_CHUNK_B }}]]
        inherit = REMAP-PP-COMPONENTS
        [[[environment]]]
            begin = $(cylc date --offset=-{{ PP_CHUNK_B | subtract_durations(HISTORY_SEGMENT) }})
            currentChunk = {{ PP_CHUNK_B }}
    [[remap-pp-components-{{ PP_CHUNK_B }}<component>]]
        inherit = REMAP-PP-COMPONENTS-{{ PP_CHUNK_B }}
    [[remap-pp-components-static]]
        inherit = REMAP-PP-COMPONENTS
        [[[environment]]]
            begin = $CYLC_TASK_CYCLE_POINT
            currentChunk = P0Y
            outputDir = $CYLC_WORKFLOW_SHARE_DIR/pp
            component =

    [[MAKE-TIMESERIES]]
        pre-script = module load cdo && mkdir -p $outputDir
        script = rose task-run --verbose --app-key make-timeseries
        [[[environment]]]
            fail_ok_components = grid_spec lumip_Lyr lumip_Lyr_crp lumip_Lyr_psl lumip_Lyr_pst
    [[MAKE-TIMESERIES-NATIVE]]
        [[[environment]]]
            inputDir = $CYLC_WORKFLOW_SHARE_DIR/shards/native
            outputDir = $CYLC_WORKFLOW_SHARE_DIR/shards/native
            component = $CYLC_TASK_PARAM_native
    [[MAKE-TIMESERIES-REGRID]]
        [[[environment]]]
            inputDir = $CYLC_WORKFLOW_SHARE_DIR/shards/regrid-xy
            outputDir = $CYLC_WORKFLOW_SHARE_DIR/shards/regrid-xy
            component = $CYLC_TASK_PARAM_regrid
            use_subdirs = 1
    [[MAKE-TIMESERIES-{{ PP_CHUNK_A }}]]
        [[[environment]]]
            begin = $(cylc date --offset=-{{ PP_CHUNK_A | subtract_durations(HISTORY_SEGMENT) }})
            inputChunk = {{ HISTORY_SEGMENT }}
            outputChunk = {{ PP_CHUNK_A }}
    [[MAKE-TIMESERIES-NATIVE-{{ PP_CHUNK_A }}]]
        inherit = MAKE-TIMESERIES, MAKE-TIMESERIES-NATIVE, MAKE-TIMESERIES-{{ PP_CHUNK_A }}
    [[make-timeseries-native-{{ PP_CHUNK_A }}<native>]]
        inherit = MAKE-TIMESERIES-NATIVE-{{ PP_CHUNK_A }}
    [[MAKE-TIMESERIES-REGRID-{{ PP_CHUNK_A }}]]
        inherit = MAKE-TIMESERIES, MAKE-TIMESERIES-REGRID, MAKE-TIMESERIES-{{ PP_CHUNK_A }}
    [[make-timeseries-regrid-{{ PP_CHUNK_A }}<regrid>]]
        inherit = MAKE-TIMESERIES-REGRID-{{ PP_CHUNK_A }}
{% if PP_CHUNK_B_COUNT > 1 %}
    [[MAKE-TIMESERIES-{{ PP_CHUNK_B }}]]
        [[[environment]]]
            begin = $(cylc date --offset=-{{ PP_CHUNK_B | subtract_durations(HISTORY_SEGMENT) }})
            inputChunk = {{ PP_CHUNK_A }}
            outputChunk = {{ PP_CHUNK_B }}
    [[MAKE-TIMESERIES-NATIVE-{{ PP_CHUNK_B }}]]
        inherit = MAKE-TIMESERIES, MAKE-TIMESERIES-NATIVE, MAKE-TIMESERIES-{{ PP_CHUNK_B }}
    [[make-timeseries-native-{{ PP_CHUNK_B }}<native>]]
        inherit = MAKE-TIMESERIES-NATIVE-{{ PP_CHUNK_B }}
    [[MAKE-TIMESERIES-REGRID-{{ PP_CHUNK_B }}]]
        inherit = MAKE-TIMESERIES, MAKE-TIMESERIES-REGRID, MAKE-TIMESERIES-{{ PP_CHUNK_B }}
    [[make-timeseries-regrid-{{ PP_CHUNK_B }}<regrid>]]
        inherit = MAKE-TIMESERIES-REGRID-{{ PP_CHUNK_B }}
{% endif %}

    [[REGRID-XY]]
        pre-script = module load fre/test && mkdir -p $outputDir
        script = rose task-run --verbose --app-key regrid-xy
        [[[environment]]]
            inputDir = {{ PTMP_DIR }}/{{ HISTORY_DIR }}/$(cylc date --template CCYYMMDD).nc
            outputDir = $CYLC_WORKFLOW_SHARE_DIR/cycle/$CYLC_TASK_CYCLE_POINT/history/regrid-xy
            begin = $CYLC_TASK_CYCLE_POINT
            fregridRemapDir = $CYLC_WORKFLOW_SHARE_DIR/fregrid-remap-files
            component = $CYLC_TASK_PARAM_regrid
            ROSE_APP_OPT_CONF_KEYS = {{ CONFIG_REGRID }}
    [[regrid-xy<regrid>]]
        inherit = REGRID-XY
    [[regrid-xy<regrid_static>]]
        inherit = REGRID-XY
        [[[environment]]]
            component = $CYLC_TASK_PARAM_regrid_static

    [[combine-statics]]
        pre-script = module load cdo && mkdir -p $outputDir
        [[[environment]]]
            inputDir = $CYLC_WORKFLOW_SHARE_DIR/pp
            outputDir = {{ PP_DIR }}

    [[mdtf]]
        pre-script = mkdir -p $MDTF_TMPDIR
        [[[environment]]]
            MDTF_TMPDIR = $CYLC_WORKFLOW_SHARE_DIR/mdtf

    [[CLEAN]]
        pre-script = "set -x"
    [[clean-history-regrid-xy]]
        inherit = CLEAN
        script = "rm -rf $CYLC_WORKFLOW_SHARE_DIR/cycle/$CYLC_TASK_CYCLE_POINT/history/regrid-xy"
    [[clean-pp-statics]]
        inherit = CLEAN
        script = "rm -rf $CYLC_WORKFLOW_SHARE_DIR/pp"
    [[clean-split-native]]
        inherit = CLEAN
        script = "rm -rf $CYLC_WORKFLOW_SHARE_DIR/cycle/$CYLC_TASK_CYCLE_POINT/split/native"
    [[clean-split-regrid-xy]]
        inherit = CLEAN
        script = "rm -rf $CYLC_WORKFLOW_SHARE_DIR/cycle/$CYLC_TASK_CYCLE_POINT/split/regrid-xy"
    [[clean-shards-static]]
        inherit = CLEAN
        script = "rm -rf $CYLC_WORKFLOW_SHARE_DIR/shards/*/*/P0Y"
    [[clean-shards-{{ HISTORY_SEGMENT }}]]
        inherit = CLEAN
        script = """
{% for I in range(0, PP_CHUNK_A_COUNT) %}
            find $CYLC_WORKFLOW_SHARE_DIR/shards/*/*/*/{{ HISTORY_SEGMENT }} -type f -name "*.*-$(cylc date --template CCYY --offset={{ HISTORY_SEGMENT | multiply_duration(-I) }})*.nc"
            find $CYLC_WORKFLOW_SHARE_DIR/shards/*/*/*/{{ HISTORY_SEGMENT }} -type f -name "*.*-$(cylc date --template CCYY --offset={{ HISTORY_SEGMENT | multiply_duration(-I) }})*.nc" -delete
            find $CYLC_WORKFLOW_SHARE_DIR/shards/regrid-xy/*/*/*/{{ HISTORY_SEGMENT }} -type f -name "*.*-$(cylc date --template CCYY --offset={{ HISTORY_SEGMENT | multiply_duration(-I) }})*.nc"
            find $CYLC_WORKFLOW_SHARE_DIR/shards/regrid-xy/*/*/*/{{ HISTORY_SEGMENT }} -type f -name "*.*-$(cylc date --template CCYY --offset={{ HISTORY_SEGMENT | multiply_duration(-I) }})*.nc" -delete
{% endfor %}
        """
    [[clean-shards-{{ PP_CHUNK_A }}]]
        inherit = CLEAN
        script = """
{% for I in range(0, PP_CHUNK_B_COUNT) %}
            find $CYLC_WORKFLOW_SHARE_DIR/shards/*/*/*/{{ PP_CHUNK_A }} -type f -name "*.*-$(cylc date --template CCYY --offset={{ PP_CHUNK_A | multiply_duration(-I) }})*.nc"
            find $CYLC_WORKFLOW_SHARE_DIR/shards/*/*/*/{{ PP_CHUNK_A }} -type f -name "*.*-$(cylc date --template CCYY --offset={{ PP_CHUNK_A | multiply_duration(-I) }})*.nc" -delete
            find $CYLC_WORKFLOW_SHARE_DIR/shards/regrid-xy/*/*/*/{{ PP_CHUNK_A }} -type f -name "*.*-$(cylc date --template CCYY --offset={{ PP_CHUNK_A | multiply_duration(-I) }})*.nc"
            find $CYLC_WORKFLOW_SHARE_DIR/shards/regrid-xy/*/*/*/{{ PP_CHUNK_A }} -type f -name "*.*-$(cylc date --template CCYY --offset={{ PP_CHUNK_A | multiply_duration(-I) }})*.nc" -delete
{% endfor %}
        """
    [[clean-shards-{{ PP_CHUNK_B }}]]
        inherit = CLEAN
        script = """
            find $CYLC_WORKFLOW_SHARE_DIR/shards/*/*/*/{{ PP_CHUNK_B }} -type f -name "*.*-$(cylc date --template CCYY)*.nc"
            find $CYLC_WORKFLOW_SHARE_DIR/shards/*/*/*/{{ PP_CHUNK_B }} -type f -name "*.*-$(cylc date --template CCYY)*.nc" -delete
            find $CYLC_WORKFLOW_SHARE_DIR/shards/regrid-xy/*/*/*/{{ PP_CHUNK_B }} -type f -name "*.*-$(cylc date --template CCYY)*.nc"
            find $CYLC_WORKFLOW_SHARE_DIR/shards/regrid-xy/*/*/*/{{ PP_CHUNK_B }} -type f -name "*.*-$(cylc date --template CCYY)*.nc" -delete
        """

# Site-specific settings
{% include 'site/' ~ SITE ~ '.cylc' %}
