#!jinja2

[meta]
    title = "Postprocessing Example 1"
    description = """
Postprocessing example that includes Bronx-like functionality,
and more (such as multiline descriptions!)
"""
    URL = https://gitlab.gfdl.noaa.gov/fre2/workflows/postprocessing

[scheduler]
    # Implicit tasks are tasks without explicit runtime definitions in [runtime], often typos
    allow implicit tasks = False
    # Configure the directories and files to be included in the remote file installation
    install = app/*, bin/*, etc/*, lib/*
    UTC mode = True

[task parameters]
    # this can be generated from history file easily
    # e.g. tar -tf /path/to/20040101.nc.tar | cut -d. -f3 | sort | uniq | xargs | sed 's/ /, /g'
    #history = aerosol_hourly_cmip, aerosol_month_cmip, atmos_co2_month, atmos_diurnal, atmos_diurnal_cmip, atmos_global_cmip, atmos_hourly, atmos_level_cmip, atmos_month, atmos_month_aer, atmos_month_cmip, atmos_scalar, atmos_static_cmip, atmos_tracer, fire_month, grid_spec, ice_month, land_dust, land_month, land_month_cmip, land_month_inst, land_static, land_static_cmip, land_static_sg, lumip_Lmon_crp, lumip_Lmon_psl, lumip_Lmon_pst, lumip_Lyr, lumip_Lyr_crp, lumip_Lyr_psl, lumip_Lyr_pst, river_daily, river_month, river_month_inst, river_static, river_static_cmip
    regrid = aerosol_hourly_cmip, aerosol_month_cmip, atmos_co2_month, atmos_diurnal, atmos_diurnal_cmip, atmos_hourly, atmos_level_cmip, atmos_month, atmos_month_aer, atmos_month_cmip, atmos_static_cmip, atmos_tracer, fire_month, land_dust, land_month, land_month_cmip, land_month_inst, land_static, land_static_cmip, land_static_sg, lumip_Lmon_crp, lumip_Lmon_psl, lumip_Lmon_pst, lumip_Lyr, lumip_Lyr_crp, lumip_Lyr_psl, lumip_Lyr_pst, river_daily, river_month, river_month_inst, river_static, river_static_cmip
    native = atmos_scalar, atmos_global_cmip, grid_spec, ice_month, land_dust, land_month, land_month_cmip, land_month_inst, land_static, land_static_cmip, land_static_sg

[scheduling]
    initial cycle point = {{ PP_START }}
    final cycle point = {{ PP_STOP }}
    [[graph]]
        P1Y = """
pp-starter => stage-history
stage-history => regrid-xy<regrid> => split-netcdf_regrid<regrid> => rename-split-to-pp_regrid<regrid>
stage-history => split-netcdf_native<native> => rename-split-to-pp_native<native>
"""
        {{ PP_START | add_date_and_duration('P1Y') }}/P2Y = """
rename-split-to-pp_regrid<regrid> => make-timeseries_regrid-2yr<regrid>
rename-split-to-pp_native<native> => make-timeseries_native-2yr<native>
make-timeseries_regrid-2yr<regrid> & make-timeseries_native-2yr<native> => remap-pp-components-2yr
"""
        {{ PP_START | add_date_and_duration('P3Y') }}/P4Y = """
make-timeseries_regrid-2yr<regrid> => make-timeseries_regrid-4yr<regrid>
make-timeseries_native-2yr<native> => make-timeseries_native-4yr<native>
make-timeseries_regrid-4yr<regrid> & make-timeseries_native-4yr<native> => remap-pp-components-4yr
"""

[runtime]
    # default config for all tasks
    [[root]]
        init-script = """
            source /home/c2b/miniconda3/etc/profile.d/conda.sh
            conda activate cylc
"""
        env-script = """
            eval $(rose task-env)
            env
"""
        script = rose task-run --verbose
        [[[events]]]
            mail events = startup shutdown aborted timeout stalled inactivity
            submission timeout = P1D

    [[pp-starter]]
        platform = background
        [[[environment]]]
            historyDir = {{ HISTORY_DIR }}

    [[stage-history]]
        pre-script = module load gcp hsm/test
        [[[environment]]]
            historyDir = {{ HISTORY_DIR }}
            ptmpDir = {{ PTMP_DIR }}

    [[SPLIT-NETCDF]]
        pre-script = module load cdo nco && mkdir -p $outputDir
        script = rose task-run --verbose --app-key split-netcdf
        [[[environment]]]
            date = $CYLC_TASK_CYCLE_POINT
    [[SPLIT-NETCDF-NATIVE]]
        inherit = SPLIT-NETCDF
        [[[environment]]]
            inputDir = {{ PTMP_DIR }}/{{ HISTORY_DIR }}/$(isodatetime --print-format CCYYMMDD $CYLC_TASK_CYCLE_POINT).nc
            outputDir = $CYLC_WORKFLOW_SHARE_DIR/split/native/$CYLC_TASK_CYCLE_POINT
            component = $CYLC_TASK_PARAM_native
    [[SPLIT-NETCDF-REGRID]]
        inherit = SPLIT-NETCDF
        [[[environment]]]
            inputDir = $CYLC_WORKFLOW_SHARE_DIR/history/regrid-xy/$CYLC_TASK_CYCLE_POINT
            outputDir = $CYLC_WORKFLOW_SHARE_DIR/split/regrid-xy/$CYLC_TASK_CYCLE_POINT
            component = $CYLC_TASK_PARAM_regrid
    [[split-netcdf_native<native>]]
        inherit = SPLIT-NETCDF-NATIVE
    [[split-netcdf_regrid<regrid>]]
        inherit = SPLIT-NETCDF-REGRID

    [[RENAME-SPLIT-TO-PP]]
        pre-script = module load cdo && mkdir -p $outputDir
        script = rose task-run --verbose --app-key rename-split-to-pp
    [[RENAME-SPLIT-TO-PP-NATIVE]]
        inherit = RENAME-SPLIT-TO-PP
        [[[environment]]]
            inputDir = $CYLC_WORKFLOW_SHARE_DIR/split/native/$CYLC_TASK_CYCLE_POINT
            outputDir = $CYLC_WORKFLOW_SHARE_DIR/shards/native
            component = $CYLC_TASK_PARAM_native
    [[RENAME-SPLIT-TO-PP-REGRID]]
        inherit = RENAME-SPLIT-TO-PP
        [[[environment]]]
            inputDir = $CYLC_WORKFLOW_SHARE_DIR/split/regrid-xy/$CYLC_TASK_CYCLE_POINT
            outputDir = $CYLC_WORKFLOW_SHARE_DIR/shards/regrid-xy
            component = $CYLC_TASK_PARAM_regrid
    [[rename-split-to-pp_native<native>]]
        inherit = RENAME-SPLIT-TO-PP-NATIVE
    [[rename-split-to-pp_regrid<regrid>]]
        inherit = RENAME-SPLIT-TO-PP-REGRID

    [[REMAP-PP-COMPONENTS]]
        pre-script = module load cdo gcp/test && mkdir -p $outputDir
        script = rose task-run --verbose --app-key remap-pp-components
        [[[environment]]]
            inputDir = $CYLC_WORKFLOW_SHARE_DIR/shards
            outputDir = {{ PP_DIR }}
    [[remap-pp-components-2yr]]
        inherit = REMAP-PP-COMPONENTS
        [[[environment]]]
            begin = $(isodatetime --offset=-P1Y $CYLC_TASK_CYCLE_POINT)
            currentChunk = P2Y
    [[remap-pp-components-4yr]]
        inherit = REMAP-PP-COMPONENTS
        [[[environment]]]
            begin = $(isodatetime --offset=-P3Y $CYLC_TASK_CYCLE_POINT)
            currentChunk = P4Y

    [[MAKE-TIMESERIES]]
        pre-script = module load cdo && mkdir -p $outputDir
        script = rose task-run --verbose --app-key make-timeseries
    [[MAKE-TIMESERIES-NATIVE]]
        [[[environment]]]
            inputDir = $CYLC_WORKFLOW_SHARE_DIR/shards/native
            outputDir = $CYLC_WORKFLOW_SHARE_DIR/shards/native
            component = $CYLC_TASK_PARAM_native
    [[MAKE-TIMESERIES-REGRID]]
        [[[environment]]]
            inputDir = $CYLC_WORKFLOW_SHARE_DIR/shards/regrid-xy
            outputDir = $CYLC_WORKFLOW_SHARE_DIR/shards/regrid-xy
            component = $CYLC_TASK_PARAM_regrid
    [[MAKE-TIMESERIES-2yr]]
        [[[environment]]]
            begin = $(isodatetime --offset=-P1Y $CYLC_TASK_CYCLE_POINT)
            inputChunk = P1Y
            outputChunk = P2Y
    [[MAKE-TIMESERIES-4yr]]
        [[[environment]]]
            begin = $(isodatetime --offset=-P3Y $CYLC_TASK_CYCLE_POINT)
            inputChunk = P2Y
            outputChunk = P4Y
    [[MAKE-TIMESERIES-NATIVE-2yr]]
        inherit = MAKE-TIMESERIES, MAKE-TIMESERIES-NATIVE, MAKE-TIMESERIES-2yr
    [[make-timeseries_native-2yr<native>]]
        inherit = MAKE-TIMESERIES-NATIVE-2yr
    [[MAKE-TIMESERIES-REGRID-2yr]]
        inherit = MAKE-TIMESERIES, MAKE-TIMESERIES-REGRID, MAKE-TIMESERIES-2yr
    [[make-timeseries_regrid-2yr<regrid>]]
        inherit = MAKE-TIMESERIES-REGRID-2yr
    [[MAKE-TIMESERIES-NATIVE-4yr]]
        inherit = MAKE-TIMESERIES, MAKE-TIMESERIES-NATIVE, MAKE-TIMESERIES-4yr
    [[make-timeseries_native-4yr<native>]]
        inherit = MAKE-TIMESERIES-NATIVE-4yr
    [[MAKE-TIMESERIES-REGRID-4yr]]
        inherit = MAKE-TIMESERIES, MAKE-TIMESERIES-REGRID, MAKE-TIMESERIES-4yr
    [[make-timeseries_regrid-4yr<regrid>]]
        inherit = MAKE-TIMESERIES-REGRID-4yr

    [[REGRID-XY]]
        pre-script = module load fre/test && mkdir -p $outputDir
        script = rose task-run --verbose --app-key regrid-xy
        [[[environment]]]
            inputDir = {{ PTMP_DIR }}/{{ HISTORY_DIR }}/$(isodatetime --print-format CCYYMMDD $CYLC_TASK_CYCLE_POINT).nc
            outputDir = $CYLC_WORKFLOW_SHARE_DIR/history/regrid-xy/$CYLC_TASK_CYCLE_POINT
            begin = $CYLC_TASK_CYCLE_POINT
            fregridRemapDir = $CYLC_WORKFLOW_SHARE_DIR/fregrid-remap-files
            component = $CYLC_TASK_PARAM_regrid
    [[regrid-xy<regrid>]]
        inherit = REGRID-XY

# Site-specific settings
{% include 'site/' ~ SITE ~ '.cylc' %}
