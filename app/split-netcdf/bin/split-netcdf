#!/bin/bash
set -euo pipefail
set -x

#
# Split NetCDF files by variable
#
# Can be tiled or not. Component is optional, defaults to all.
#
# Input format:  date.component(.tileX).nc
# Output format: date.component.var(.tileX).nc
#

echo Arguments:
echo "    input dir: $inputDir"
echo "    output dir: $outputDir"
echo "    date: $date"
echo "    component: $component"
echo "    use subdirs: ${use_subdirs:=}"
echo Utilities:
type cdo

# Verify input directory exists and is a directory
if [[ ! -d $inputDir ]]; then
    echo "Error: Input directory '${inputDir}' does not exist or isn't a directory"
    exit 1
fi

# Verify output directory exists and is a directory
if [[ ! -d $outputDir ]]; then
    echo "Error: Output directory '${outputDir}' does not exist or isn't a directory"
    exit 1
fi

# Setup PYTHONPATH and io lists for the data lineage tool
if [ ! -z "${EPMT_DATA_LINEAGE+x}" ] && [ "$EPMT_DATA_LINEAGE" = "1" ]; then
    export PYTHONPATH=$CYLC_SUITE_DEF_PATH:$PYTHONPATH
    export input_file_list=
    export output_file_list=
    echo "Set PYTHONPATH and created i/o lists"
fi

# Find the files to split
# extended globbing used to find both tiled and non-tiled files
cd $inputDir
shopt -s extglob

# If in sub-dir mode, process the sub-directories instead of the main one
if [[ $use_subdirs == 0 ]]; then
    for subdir in $(ls); do
        pushd $subdir
        files=$(echo *.$component?(.tile?).nc)

        # Exit if no input files are found
        if [[ $files =~ \* ]]; then
            echo No input files found, skipping the subdir "$subdir"
            popd
            continue
        fi

        # Create the output subdir if needed
        mkdir -p $outputDir/$subdir
        
        # Split the files by variable
        # Note: cdo may miss some weird land variables related to metadata/cell_measures
        for file in $files; do
                cdo --history splitname $file $outputDir/$subdir/$(echo $file | sed 's/nc$//')
        done

        if [ ! -z "${EPMT_DATA_LINEAGE+x}" ] && [ "$EPMT_DATA_LINEAGE" = "1" ]; then

            epmt annotate EPMT_DATA_LINEAGE_IN_PATH="$inputDir/$subdir/"
            echo "[DATA LINEAGE] Annotated $inputDir/$subdir/ to EPMT_DATA_LINEAGE_IN_PATH"

            epmt annotate EPMT_DATA_LINEAGE_OUT_PATH="$outputDir/$subdir/"
            echo "[DATA LINEAGE] Annotated $outputDir/$subdir to EPMT_DATA_LINEAGE_OUT_PATH"

            start_time=$(date +%s)

            for file in $files; do
                hash_val=$(/home/Cole.Harvey/.conda/envs/bloom-filter-env/bin/python \
                -m data_lineage.bloomfilter.HashGen $inputDir/$subdir/$file)
                export input_file_list="${input_file_list}$file $hash_val,"
                echo "[DATA LINEAGE] Added $file to input list with hash_val: $hash_val"
            done

            end_time=$(date +%s)
            duration=$((end_time - start_time))
            echo "Time spent hashing and creating the file list: $duration seconds"

            cd $outputDir/$subdir
                start_time=$(date +%s)

                for output_file in $(ls); do
                    hash_val=$(/home/Cole.Harvey/.conda/envs/bloom-filter-env/bin/python \
                    -m data_lineage.bloomfilter.HashGen $(pwd)/$output_file)
                    export output_file_list="${output_file_list}$output_file $hash_val,"
                    echo "[DATA LINEAGE] Added $output_file to output list with hash_val: $hash_val"
                done

                end_time=$(date +%s)
                duration=$((end_time - start_time))
                echo "Time spent hashing and creating the file list: $duration seconds"

            cd ../..
        fi
        popd
    done
else
    files=$(echo *.$component?(.tile?).nc)
    echo *.?(.tile?).nc

    # Exit if no input files are found
    if [[ $files =~ \* ]]; then
        echo ERROR: No input files found
        exit 1
    fi

    # Split the files by variable
    for file in $files; do
        cdo --history splitname $file $outputDir/$(echo $file | sed 's/nc$//')
    done

    if [ ! -z "${EPMT_DATA_LINEAGE+x}" ] && [ "$EPMT_DATA_LINEAGE" = "1" ]; then
        epmt annotate EPMT_DATA_LINEAGE_IN_PATH="$inputDir/"
        echo "[DATA LINEAGE] Annotated $inputDir/ to EPMT_DATA_LINEAGE_IN_PATH"

        epmt annotate EPMT_DATA_LINEAGE_OUT_PATH="$outputDir/"
        echo "[DATA LINEAGE] Annotated $outputDir/ to EPMT_DATA_LINEAGE_OUT_PATH"

        start_time=$(date +%s)

        for file in $files; do
            hash_val=$(/home/Cole.Harvey/.conda/envs/bloom-filter-env/bin/python \
            -m data_lineage.bloomfilter.HashGen $inputDir/$file)
            export input_file_list="${input_file_list}$file $hash_val,"
            echo "[DATA LINEAGE] Added $file to input list with hash_val: $hash_val"
        done

        end_time=$(date +%s)
        duration=$((end_time - start_time))
        echo "Time spent hashing and creating the file list: $duration seconds"

        cd $outputDir/
         
            start_time=$(date +%s)

            for output_file in $(ls); do
                hash_val=$(/home/Cole.Harvey/.conda/envs/bloom-filter-env/bin/python \
                -m data_lineage.bloomfilter.HashGen $(pwd)/$output_file)
                export output_file_list="${output_file_list}$output_file $hash_val,"
                echo "[DATA LINEAGE] Added $output_file to output list with hash_val: $hash_val"
            done

            end_time=$(date +%s)
            duration=$((end_time - start_time))
            echo "Time spent hashing and creating the file list: $duration seconds"

        cd ..
    fi

fi

if [ ! -z "${EPMT_DATA_LINEAGE+x}" ] && [ "$EPMT_DATA_LINEAGE" = "1" ]; then

    # Annotate to EPMT
    if [ -n "$input_file_list" ]; then
        compressed_bytes=$(/home/Cole.Harvey/.conda/envs/bloom-filter-env/bin/python \
        -m data_lineage.bloomfilter.StringCompression "${input_file_list}")
        epmt -v annotate EPMT_DATA_LINEAGE_IN="${compressed_bytes%*,}"
        echo "[DATA LINEAGE] Annotated input files to EPMT_LINEAGE_IN"
    fi

    if [ -n "$output_file_list" ]; then
        compressed_bytes=$(/home/Cole.Harvey/.conda/envs/bloom-filter-env/bin/python \
        -m data_lineage.bloomfilter.StringCompression "${output_file_list}")
        epmt -v annotate EPMT_DATA_LINEAGE_OUT="${compressed_bytes%*,}"
        echo "[DATA LINEAGE] Annotated output files to EPMT_LINEAGE_OUT"
    fi
fi

echo Natural end of the NetCDF splitting
exit 0
