#!/bin/bash
set -euo pipefail

# for emacs syntax highlighting outside of a bin/ dir
# -*- Shell -*-
#
# use fre-python-tools generate_time_average module to average history files 
#


## uncomment this block and set args for local development, not attached to a cylc workflow.
#unset CYCLE_TASK_CYCLE_POINT
#export CYLC_TASK_CYCLE_POINT=19790101T0000Z #for cylc cycle-point to work w/o argument, this env var must be set. 
##export CYLC_TASK_CYCLE_POINT=19800101T0000Z
#inputDir=/xtmp/Ian.Laflotte/work/cylc-run/am5_c96L33_amip/run1/share/shards/native/default
##inputDir=/xtmp/Ian.Laflotte/work/cylc-run/am5_c96L33_amip/run1/share/shards/regrid-xy/default/default
#component=river_month
##component=land_month
##component=atmos_month
#histSegmentSize=P1Y
##debug

module load fre-python-tools/0.0.1

echo Arguments:
echo "    cycle point: $CYLC_TASK_CYCLE_POINT"
echo "    input dir: $inputDir"
echo "    component: $component"
echo "    interval: $interval"
echo Utilities:
type cylc
type generate-time-averages

#this probably shouldnt be a substitute for a proper "find" command...
echo ""
echo "---DEBUG--- resolving target directories"
if [[ $use_subdirs ]]; then
    dirs=($(ls -d $inputDir/*/$component/ts/*))
else
    dirs=($(ls -d $inputDir/$component/ts/*))
fi
if [[ ${#dirs[@]} -lt 1 ]]; then
	echo "---ERROR--- ZERO DIRECTORIES FOUND!"
	exit 1
fi
echo "number of dirs found is : ${#dirs[@]}"

for dir in ${dirs[@]}; do
	echo "---DEBUG--- FOUND dir: $dir"	
	echo "looking at directory structure file frequency..."

	# check file frequency via directory name
	file_freq=${dir##*/}
	echo "frequency found is: $file_freq"

	#now need to pick the right date-time format for the cycle-point
	if [[ $file_freq == P1M ]]; then
		cyclepoint=$(cylc cycle-point --template CCYY12)
        tool_args=month
	elif [[ $file_freq == P1Y ]]; then
		cyclepoint=$(cylc cycle-point --template CCYY)
        tool_args=all
	else
		echo "---WARNING--- file_freq='$file_freq' not monthly or annual. moving on."
		continue
	fi
															   
	files=($(ls $dir/$interval/$component.*-$cyclepoint.*.nc))
	if [[ ${#files[@]} -lt 1 ]]; then
		echo "---WARNING--- no files found in directory $dir!"
		echo "moving on to next directory..."
	else
		echo "---DEBUG--- found ${#files[@]} files"
	fi	

	debugCount=0
	for file in ${files[@]}; do
		#echo "---DEBUG--- going to time-average file=$file"
		output_file=${file%/$component/*}/$component/av${file#*/$component/ts}
		output_dir=${output_file%/*}
		
		mkdir -p $output_dir
		
		echo "---DEBUG--- output going to be=$output_file"

        cmd="generate-time-averages -p cdo -a $tool_args ${file} ${output_file}"
		
		if ! $cmd; then
		    echo "---ERROR--- Failed: timeaverage: $cmd"
            exit $?
        fi
	done
	
done

exit 0
