#!/bin/bash
set -euo pipefail

# for emacs syntax highlighting outside of a bin/ dir
# -*- Shell -*-
#
# use fre-python-tools generate_time_average module to average history files 
#


# uncomment this block and set args for local development, not attached to a cylc workflow.
unset CYCLE_TASK_CYCLE_POINT
export CYLC_TASK_CYCLE_POINT=19790101T0000Z #for cylc cycle-point to work w/o argument, this env var must be set. 
#export CYLC_TASK_CYCLE_POINT=19800101T0000Z
inputDir=/xtmp/Ian.Laflotte/work/cylc-run/am5_c96L33_amip/run1/share/shards/native/default
#inputDir=/xtmp/Ian.Laflotte/work/cylc-run/am5_c96L33_amip/run1/share/shards/regrid-xy/default/default
component=river_month
#component=land_month
#component=atmos_month
histSegmentSize=P1Y
MY_PYTHON_SCRIPT=/home/Ian.Laflotte/Working/pp.am5/app/generate-time-averages/generate_time_averages/generate_time_averages.py
#debug


echo "module load python..."
module load python
#echo "module load fre-nctools..."
#module load fre-nctools
module load cdo

echo Arguments:
echo "    cycle point: $CYLC_TASK_CYCLE_POINT"
echo "    input dir: $inputDir"
echo "    component: $component"
echo "    histSegmentSize: $histSegmentSize"
echo Utilities:
type cylc


# empty env vars are A-OK to bash! this is for epmt data lineage
export input_file_list=
export output_file_list=


echo "---DEBUG--- BASH_SOURCE[0]=${BASH_SOURCE[0]}"
MY_PYTHON_SCRIPT=$(dirname ${BASH_SOURCE[0]})/../generate_time_averages/generate_time_averages.py
echo "---DEBUG--- time averaging script: $MY_PYTHON_SCRIPT, locating..."
if ls $MY_PYTHON_SCRIPT; then
	echo "script found. proceeding..."
else
	echo "---ERROR--- error, script not found."
	exit 1
fi
echo ""


#this probably shouldnt be a substitute for a proper "find" command...
echo ""
echo "---DEBUG--- resolving target directories"
dirs=($(ls -d $inputDir/$component/*))
if [[ ${#dirs[@]} -lt 1 ]]; then
	echo "---ERROR--- ZERO DIRECTORIES FOUND!"
	exit 1
fi
echo "number of dirs found is : ${#dirs[@]}"

for dir in ${dirs[@]}; do
	echo "---DEBUG--- FOUND dir: $dir"
	
	echo "looking at directory structure file frequency..."
	file_freq=${dir##*/}
	echo "frequency found is: $file_freq"
	if [[ $file_freq == P1D ]]; then
		files=($(ls $dir/$histSegmentSize/$component.$(cylc cycle-point --template CCYYMMDD)*.nc))
	elif [[ $file_freq == P1M ]]; then
		files=($(ls $dir/$histSegmentSize/$component.$(cylc cycle-point --template CCYYMM)*.nc))
	elif [[ $file_freq == PT6H ]]; then
		files=($(ls $dir/$histSegmentSize/$component.$(cylc cycle-point --template %Y%m%d%H)*.nc))
	else
		echo "---WARNING--- file freq not found. moving on."
		continue
	fi

	if [[ ${#files[@]} -lt 1 ]]; then
		echo "---WARNING--- no files found in directory $dir!"
		echo "moving on to next directory..."
	else
		echo "---DEBUG--- found ${#files[@]} files"
	fi	

	debugCount=0
	for file in ${files[@]}; do
		#export input_file_list=${input_file_list}$file, #no checksum, works great!
		export input_file_list=${input_file_list}$(shasum -a 512256 $file), #with checksum

		#echo "---DEBUG--- going to time-average file=$file"
		output_file=${file%/$component/*}/$component/tas${file#*/$component}
		output_dir=${output_file%/*}
		
		if [[ ! -d $output_dir ]]; then

			mkdir -p $output_dir
		else
			echo "---WARNING--- output dir not created because it already exists."
		fi
		
		echo "---DEBUG--- output going to be=$output_file"
		
		#python $MY_PYTHON_SCRIPT -i "$file" -o "${output_file}" -p "fre-nctools"
		#python -O $MY_PYTHON_SCRIPT -i "$file" -o "${output_file}" -p "fre-python-tools"
		python -O $MY_PYTHON_SCRIPT -i "$file" -o "${output_file}" -p "cdo"
		#python -O $MY_PYTHON_SCRIPT -i "$file" -o "${output_file}" -p "nco"

		if [[ -f $output_file ]]; then
			#export output_file_list=${output_file_list}$output_file, #no checksum, works great!
			export output_file_list=${output_file_list}$(shasum -a 512256 $output_file), #with checksum
		else
			export output_file_list=${output_file_list}'None  None', #with checksum
			                                                         #note, two spaces, b.c. that's what shasum
			                                                         #does to the checksum+filename output
		fi
		#echo "---DEBUG--- timeaverage exit status: ?=${?}"
		#debugCount=$(($debugCount+1))
		#if [[ $debugCount -gt 2 ]]; then
		#	break
		#fi
	done
	
done

echo "---DEBUG--- gonna try epmt stuff here..."
which epmt
echo "---DEBUG--- epmt annotate......"
#echo "---DEBUG--- epmt annotate DATA_LINEAGE_IN=${input_file_list%*,}"
epmt annotate EPMT_DATA_LINEAGE_IN="${input_file_list%*,}"
#echo "---DEBUG--- epmt annotate DATA_LINEAGE_OUT=${output_file_list%*,}"
epmt annotate EPMT_DATA_LINEAGE_OUT="${output_file_list%*,}"
echo ""

#exit $?
#exit 1 
exit 0
