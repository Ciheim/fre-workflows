#!/bin/bash
set -euo pipefail
set -x

# Form the legacy Bronx timeaverage directory path
# given a frequency and chunksize
function form_av_dirs {
    case $1 in
        P1Y)
            freq=annual
            ;;
        P1M)
            freq=monthly
            ;;
        *)
            echo "ERROR: unexpected freq $freq"
            exit 2
            ;;
    esac

    if [[ $2 =~ ^P([0-9]+)Y$ ]]; then
        chunk=${BASH_REMATCH[1]}yr
    else
        echo "ERROR: expected chunk $chunk"
        exit 2
    fi

    echo ${freq}_$chunk
}

#
# Combine (variables) and split (monthly) timeaverages
#

export input_file_list=
export output_file_list=
echo "[COLE] created i/o lists"

echo Arguments:
echo "    input dir: $inputDir"
echo "    output dir: $outputDir"
echo "    component: $component"
echo "    begin: $begin"
echo "    end: $end"
echo "    current chunk: $currentChunk"
echo Utilities:
type cdo
type ncks

# Verify input directory exists and is a directory
if [[ ! -d $inputDir ]]; then
    echo "Error: Input directory '${inputDir}' does not exist or isn't a directory"
    exit 1
fi

# Verify output directory exists and is a directory
if [[ ! -d $outputDir ]]; then
    echo "Error: Output directory '${outputDir}' does not exist or isn't a directory"
    exit 1
fi

# Exit early, with appearence of success, if the component directory does not exist
# This means the make-timeavgs task did not work, which almost certainly means that
# the source files are not monthly or annual, which are the only currently supported
# timeaveraging.
if [[ ! -d $inputDir/$component ]]; then
    echo Note: exiting early with appearance of success. This is a workaround.
    exit 0
fi
cd $inputDir/$component

for freq in $(ls); do
    pushd $freq/$currentChunk

    # workaround to target YYYY files if chunkSize is P1Y
    if [[ $currentChunk == P1Y ]]; then
        dates=$begin
    else
        dates="$begin-$end"
    fi

    # remove previous intermediate files if they exist
    if [[ -f $component.$dates.nc ]]; then
        rm -f $component.$dates.nc
    fi

    # create output dir
    subdir=$(form_av_dirs $freq $currentChunk)
    mkdir -p $outputDir/$subdir


    # combine the timeaverages into one file
    # CDO merge is the best tool for this, but chokes on multiple vertical coordinates
    # ncks is far less efficient, and also can't append some variables, but we
    # have to do them one at a time anyway, so we can omit the failed ones for now
    if [[ $freq == P1M ]]; then
        if ! cdo -O merge $component.$dates.*.nc $component.$dates.nc; then
            for file in $component.$dates.*.nc; do
                if ! ncks -A $file $component.$dates.nc; then
                    echo "Error: Could not append $file to $component.$dates.nc"
                fi
            done
        fi
        cdo -O splitmon $component.$dates.nc $outputDir/$subdir/$component.$dates.

        for file in $component.$dates.*.nc; do
            export input_file_list=${input_file_list}$(shasum -a 512256 $inputDir/$component/$freq/$currentChunk/$file),
            echo -e "\n[COLE] added $inputDir/$component/$freq/$currentChunk/$file to input list"
        done
        for output_file in "$outputDir/$subdir/$component.$dates."*; do
            export output_file_list=${output_file_list}$(shasum -a 512256 $output_file),
            echo -e "\n[COLE] added $output_file to output list\n"
        done

    elif [[ $freq == P1Y ]]; then
        if ! cdo -O merge $component.$dates.*.nc $outputDir/$subdir/$component.$dates.ann.nc; then
            for file in $component.$dates.*.nc; do
                if ! ncks -A $file $outputDir/$subdir/$component.$dates.ann.nc; then
                    echo "Error: Could not append $file to $component.$dates.ann.nc"
                fi
            done
        fi

        for file in $component.$dates.*.nc; do
            export input_file_list=${input_file_list}$(shasum -a 512256 $inputDir/$component/$freq/$currentChunk/$file),
            echo -e "\n[COLE] added $inputDir/$component/$freq/$currentChunk/$file to input list\n"
        done

        output_file = $component.$dates.ann.nc
        export input_file_list=${input_file_list}$(shasum -a 512256 $output_file),
        echo -e "\n[COLE] added $output_file to input list"
        echo -e "[COLE] output file location for P1Y : $outputDir/$subdir/$output_file\n"
    else
        echo "Error: frequency $freq not supported"
        exit 2
    fi

    popd
done

echo "[COLE] epmt analysis and annotate"
which epmt

if [[ -n "$input_file_list" ]]; then
    echo -e "\n---input---"
    echo -e "epmt annotate DATA_LINEAGE_IN = \n	${input_file_list%*,}"
    epmt annotate EPMT_DATA_LINEAGE_IN="${input_file_list%*,}"
fi

if [ -n "$output_file_list" ]; then
    echo -e "\n---output---"
    echo -e "epmt annotate DATA_LINEAGE_OUT = \n    ${output_file_list%*,}"
    epmt annotate EPMT_DATA_LINEAGE_OUT="${output_file_list%*,}"
fi


echo Natural end of the timeavg combining
exit 0
