#!/usr/bin/env python

# Description: Remap pp components 

import os
import glob
import sys
from pathlib import Path
import shared
import metomi.rose.config as mrc

# For my own testing: Set variables to play with -- WILL REMOVE
#inputDir = Path(os.getcwd()) / "rewrite_inputDir"
#outputDir = Path(os.getcwd()) / "rewrite_outputDir"
#begin = "00010101T0000Z" 
#currentChunk = "P1Y"
#components = ["atmos_scalar"]
##components = ["atmos", "atmos_cmip", "ocean"]
##components = ["land" ,"atmos_scalar"]
#product = "ts"
##dirTSWorkaround = ""
#dirTSWorkaround = "1"
#ens_mem = "" 
##ens_mem = "01"


##################################

# Parse yaml directly for rose-app info
# Set variables
inputDir = os.environ['inputDir']
outputDir = os.environ['outputDir']
begin = os.environ['begin']
currentChunk = os.environ['currentChunk']
components = os.environ['component']
product = os.environ['product']
dirTSWorkaround = os.environ['dirTSWorkaround']
ens_mem = os.environ['ens_mem']

print("Arguments:")
print("    input dir: "+inputDir)
print("    output dir: "+outputDir)
print("    begin: "+begin)
print("    current chunk: "+currentChunk)
print("    components: "+components)
print("    product: "+product)
print("    dirTSWorkaround: "+dirTSWorkaround)
print("    ens_mem: "+ens_mem)
print("Utilities:")

COPY_TOOL = os.environ['COPY_TOOL']
type(COPY_TOOL)

##############################################################
# ADD DESCRIPTION
def verify_dirs(inputDir,outputDir):
  # Verify input directory exists and is a directory
  if os.path.isdir(inputDir):
      print("Input directory is a valid directory")
  else:
      print(f"Error: Input directory {inputDir} is not a valid directory")
      sys.exit(1)

  # Verify output directory exists and is a directory
  if os.path.isdir(outputDir):
      print("Output directory is a valid directory")
  else:
      print(f"Error: Output directory {outputDir} is not a valid directory")
      sys.exit(1)

##############################################################
# ADD DESCRIPTION
def create_dir(outdir,comp,freq,chunk,ens,dirTS):
  # DEFINE DIR
  if ens:
    if dirTS:
      dir = f"{comp}/ts/{ens}/{freq}/{chunk}"
    else:
      dir = f"{comp}/{ens}/{freq}/{chunk}"
  else:
    if dirTS:
      dir = f"{comp}/ts/{freq}/{chunk}"
    else:
      dir = f"{comp}/{freq}/{chunk}"

  # Create dir from outputDir
  os.chdir(outdir)
  os.makedirs(dir,exist_ok=True)

  return(dir)

##############################################################
# ADD DESCRIPTION
def bronx_style(freq, chunk, ens_member, outDir, component):
  freq_legacy = shared.freq_to_legacy(freq)
  chunk_legacy = shared.chunk_to_legacy(chunk)
  if chunk_legacy == "error":
    print(f"Error: Skipping legacy directory for chunk: {chunk}")
  else:
    if ens_member:
      dir1 = f"{outDir}/{component}/ts/{ens_member}"
      os.chdir(f"{outDir}/{component}/ts/{ens_member}")
    else:
      dir1 = f"{outDir}/{component}/ts"
      os.chdir(f"{outDir}/{component}/ts")
    
#    ##### TAKE OUT - FOR MY OWN TESTING/SANITY
#    with open("BSS","w") as f:
#      f.write(os.getcwd())
#      f.write(f"\nFL: {freq_legacy}\n")
#      f.write(f"\nCL: {chunk_legacy}\n")
#    #####

    os.makedirs(freq_legacy, exist_ok=True)
    os.chdir(freq_legacy)
    
    if not os.path.exists(chunk_legacy):
      os.symlink(f"{dir1}/{freq}/{chunk}", chunk_legacy)

##############################################################
# ADD DESCRIPTION
def search_files(vars,source,begin,freq):
  # with glob - files seen as list
  if freq == "P0Y":
    if vars == "all":
      files = glob.glob(f"{source}.*.tile?.nc")
      #print(files)
    else:
      for v in vars:
        files = glob.glob(f"{source}.{v}.tile?.nc")
  else:
    if product == "ts":
      date = shared.truncate_date(begin, freq)
      #print(date)
    elif product == "av":
      date = shared.truncate_date(begin, "P1Y")
      #print(date)
    else:
      print("Product not set to ts or av.")
      sys.exit(2)

    if vars == "all":
      files = glob.glob(f"{s}.{date}-*.tile?.nc")
    else:
      #files = ""
      for v in vars:
        files = glob.glob(f"{source}.{date}-*.{v}.tile?.nc")

    if product == "av" and currentChunk == "P1Y":
      files = glob.glob(f"{source}.{date}.*tile?.nc")

  return(files)

##################################### MAIN FUNCTION #####################################
# ADD DESCRIPTION
def remap(inputDir,outputDir,begin,currentChunk,components,product,dirTSWorkaround,ens_mem):
  # Read rose config files (for now)
  configDir = os.getcwd()
  config = mrc.load(f"{configDir}/rose-app-run.conf")

  # Verify the input and output directories
  verify_dirs(inputDir, outputDir)

  os.chdir(inputDir)
  indir = os.getcwd()

  for comp in config.get():
    # Make sure it always starts in inputDir
    os.chdir(indir)

    if comp != "env" and comp != "command":
      if components != None and comp not in components:
        continue  
   
      #compOut: variable/field per component in rose config
      compOut = config.get([comp])

      #fields: info for each field 
      fields = compOut.get_value()

      ## Define vars ##CHECK THIS
      if fields.get("variables"):
        vars = fields.get("variables").get_value()
        vars = vars.split()
      else:
        vars = "all"

      #GRID
      if fields.get("grid"):
        grid = fields.get("grid").get_value()
        if ens_mem != None:
          newdir = f"{grid}/{ens_mem}"
          #os.makedirs(newdir,exist_ok=True)
          os.chdir(newdir)
        else:
          #os.makedirs(grid,exist_ok=True)
          os.chdir(grid)

        #SOURCES
        if fields.get("sources"):
          sources = fields.get("sources").get_value()
          sources = sources.split()
        
        for s in sources:
          # Start in grid directory
          os.chdir(f"{indir}/{grid}")

          # Go into source directory 
          # os.makedirs(s,exist_ok=True)
          os.chdir(s)
          
          #FREQ
          if fields.get("freq"):
            freq = fields.get("freq").get_value()
            #os.makedirs(freq,exist_ok=True)
            os.chdir(freq)

            #CHUNK
            if fields.get("chunk"):
              chunk = fields.get("chunk").get_value()
              #os.makedirs(chunk,exist_ok=True)
              #os.chdir(chunk)

              # Create directory 
              dir = create_dir(outdir = outputDir,
                               comp = comp,
                               freq = freq,
                               chunk = chunk,
                               ens = ens_mem,
                               dirTS = dirTSWorkaround)

              # Create bronx-style symlinks for TS only
              if dirTSWorkaround:
                bronx_style(freq = freq, 
                            chunk = chunk, 
                            ens_member = ens_mem,
                            outDir = outputDir,
                            component = comp)


              # Search for files in chunk directory
              os.chdir(f"{indir}/{grid}/{s}/{freq}/{chunk}")
              files = search_files(vars = vars,
                                   source = s,
                                   begin = begin,
                                   freq = freq)  

              if not files:
                print(f"\nError: No input files found in {os.getcwd()}")
                sys.exit(1)
              else:
                for f in files:
                  newfile = f"{comp}.{f}"

                  # If file exists, remove it (would exist if workflow was run previously)
                  if os.path.exists(f"{dir}/{newfile}"):
                    os.remove(f"{dir}/{newfile}")
                
                  # Replace with new file
                  #os.symlink(f"{os.getcwd()}/{f}",f"{dir}/{newfile}") 
                  os.system(f"ln {f} {dir}/{newfile}")
                  ## OR COPY TOOL
                  ## os.system(F"{COPY_TOOL} {os.getcwd()}/{f} {dir}/{newfile}")           

  print("Component remapping complete")

if __name__ == '__main__':
   remap(inputDir,outputDir,begin,currentChunk,components,product,dirTSWorkaround,ens_mem)

