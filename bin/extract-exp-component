#!/app/conda/miniconda/envs/cylc/bin/python
'''
this script takes in CYLC_TASK_NAMESPACE_HIERARCHY 
and from it, extracts and forms a string representing 
the exp_component field value for EPMT_JOB_TAGS, 
recorded via `epmt annotate`
'''

import re


#this is the start of a set of test cases- just a list for now.
#will massage this into some kind of pytest module after the guts
#of the script are worked out a bit TODO
test_me_list=[ #first entry in each pair is the "answer", the second entry is the input. None object represents "no answer" for now...
#    ["pp-starter"     ,"root pp-starter"                                                                                                                        ],
#    ["pp-starter"     ,"root pp-starter"                                                                                                                        ],
#    ["combine-statics","root combine-statics"                                                                                                                   ],
#    ["data-catalog"   ,"root data-catalog"                                                                                                                      ],
#    ["stage-history"  ,"root STAGE-HISTORY stage-history"                                                                                                       ],
#    ["stage-history"  ,"root STAGE-HISTORY stage-history"                                                                                                       ],
#    ["clean"          ,"root CLEAN clean-history-regrid-xy"                                                                                                     ],
#    ["clean"          ,"root CLEAN clean-pp-timeavgs-P2Y"                                                                                                       ],
#    ["clean"          ,"root CLEAN clean-shards-P1Y"                                                                                                            ],
#    ["clean"          ,"root CLEAN clean-split-native"                                                                                                          ],
#    ["clean"          ,"root CLEAN clean-split-regrid-xy"                                                                                                       ],
#    ["clean"          ,"root CLEAN clean-history-regrid-xy"                                                                                                     ],
#    ["clean"          ,"root CLEAN clean-pp-statics"                                                                                                            ],
#    ["clean"          ,"root CLEAN clean-shards-static"                                                                                                         ],
#    ["clean"          ,"root CLEAN clean-split-native"                                                                                                          ],
#    ["clean"          ,"root CLEAN clean-split-regrid-xy"                                                                                                       ],
#    ["atmos_4xdaily"                ,"root REGRID-XY regrid-xy_atmos_4xdaily"                                                                                                 ],
#    ["atmos_daily_cmip"             ,"root REGRID-XY regrid-xy_atmos_daily_cmip"                                                                                              ],
#    ["atmos_month"                  ,"root REGRID-XY regrid-xy_atmos_month"                                                                                                   ],
#    ["atmos_4xdaily"                ,"root REGRID-XY regrid-xy_atmos_4xdaily"                                                                                                 ],
#    ["atmos_daily_cmip"             ,"root REGRID-XY regrid-xy_atmos_daily_cmip"                                                                                              ],
#    ["atmos_month"                  ,"root REGRID-XY regrid-xy_atmos_month"                                                                                                   ],
    [None             ,"root SPLIT-NETCDF SPLIT-NETCDF-NATIVE split-netcdf-native_atmos_global_cmip"                                                            ],
    [None             ,"root SPLIT-NETCDF SPLIT-NETCDF-REGRID split-netcdf-regrid_atmos_4xdaily"                                                                ],
    [None             ,"root SPLIT-NETCDF SPLIT-NETCDF-REGRID split-netcdf-regrid_atmos_daily_cmip"                                                             ],
    [None             ,"root SPLIT-NETCDF SPLIT-NETCDF-REGRID split-netcdf-regrid_atmos_month"                                                                  ],
    [None             ,"root SPLIT-NETCDF SPLIT-NETCDF-NATIVE split-netcdf-native_atmos_global_cmip"                                                            ],
    [None             ,"root SPLIT-NETCDF SPLIT-NETCDF-REGRID split-netcdf-regrid_atmos_4xdaily"                                                                ],
    [None             ,"root SPLIT-NETCDF SPLIT-NETCDF-REGRID split-netcdf-regrid_atmos_daily_cmip"                                                             ],
    [None             ,"root SPLIT-NETCDF SPLIT-NETCDF-REGRID split-netcdf-regrid_atmos_month"                                                                  ],
    [None             ,"root COMBINE-TIMEAVGS COMBINE-TIMEAVGS-P2Y combine-timeavgs-P2Y_atmos"                                                                  ],
    [None             ,"root COMBINE-TIMEAVGS COMBINE-TIMEAVGS-P2Y combine-timeavgs-P2Y_atmos_scalar"                                                           ],
    [None             ,"root REMAP-PP-COMPONENTS REMAP-PP-COMPONENTS-TS remap-pp-components-static"                                                             ],
    [None             ,"root REMAP-PP-COMPONENTS REMAP-PP-COMPONENTS-AV REMAP-PP-COMPONENTS-AV-P2Y remap-pp-components-av-P2Y_atmos"                            ],
    [None             ,"root REMAP-PP-COMPONENTS REMAP-PP-COMPONENTS-AV REMAP-PP-COMPONENTS-AV-P2Y remap-pp-components-av-P2Y_atmos_scalar"                     ],
    [None             ,"root REMAP-PP-COMPONENTS REMAP-PP-COMPONENTS-TS REMAP-PP-COMPONENTS-TS-P2Y remap-pp-components-ts-P2Y_atmos"                            ],
    [None             ,"root REMAP-PP-COMPONENTS REMAP-PP-COMPONENTS-TS REMAP-PP-COMPONENTS-TS-P2Y remap-pp-components-ts-P2Y_atmos_scalar"                     ],
    [None             ,"root RENAME-SPLIT-TO-PP RENAME-SPLIT-TO-PP-NATIVE rename-split-to-pp-native_atmos_global_cmip"                                          ],
    [None             ,"root RENAME-SPLIT-TO-PP RENAME-SPLIT-TO-PP-REGRID rename-split-to-pp-regrid_atmos_4xdaily"                                              ],
    [None             ,"root RENAME-SPLIT-TO-PP RENAME-SPLIT-TO-PP-REGRID rename-split-to-pp-regrid_atmos_daily_cmip"                                           ],
    [None             ,"root RENAME-SPLIT-TO-PP RENAME-SPLIT-TO-PP-REGRID rename-split-to-pp-regrid_atmos_month"                                                ],
    [None             ,"root RENAME-SPLIT-TO-PP RENAME-SPLIT-TO-PP-NATIVE rename-split-to-pp-native_atmos_global_cmip"                                          ],
    [None             ,"root RENAME-SPLIT-TO-PP RENAME-SPLIT-TO-PP-REGRID rename-split-to-pp-regrid_atmos_4xdaily"                                              ],
    [None             ,"root RENAME-SPLIT-TO-PP RENAME-SPLIT-TO-PP-REGRID rename-split-to-pp-regrid_atmos_daily_cmip"                                           ],
    [None             ,"root RENAME-SPLIT-TO-PP RENAME-SPLIT-TO-PP-REGRID rename-split-to-pp-regrid_atmos_month"                                                ],
 #   [None             ,"root MAKE-TIMEAVGS-P2Y MAKE-TIMEAVGS-NATIVE MAKE-TIMEAVGS MAKE-TIMEAVGS-NATIVE-P2Y make-timeavgs-native-P2Y_atmos_global_cmip"          ],
 #   [None             ,"root MAKE-TIMEAVGS-P2Y MAKE-TIMEAVGS-REGRID MAKE-TIMEAVGS MAKE-TIMEAVGS-REGRID-P2Y make-timeavgs-regrid-P2Y_atmos_4xdaily"              ],
 #   [None             ,"root MAKE-TIMEAVGS-P2Y MAKE-TIMEAVGS-REGRID MAKE-TIMEAVGS MAKE-TIMEAVGS-REGRID-P2Y make-timeavgs-regrid-P2Y_atmos_daily_cmip"           ],
 #   [None             ,"root MAKE-TIMEAVGS-P2Y MAKE-TIMEAVGS-REGRID MAKE-TIMEAVGS MAKE-TIMEAVGS-REGRID-P2Y make-timeavgs-regrid-P2Y_atmos_month"                ],
 #   [None             ,"root MAKE-TIMESERIES-P2Y MAKE-TIMESERIES-NATIVE MAKE-TIMESERIES MAKE-TIMESERIES-NATIVE-P2Y make-timeseries-native-P2Y_atmos_global_cmip"],
 #   [None             ,"root MAKE-TIMESERIES-P2Y MAKE-TIMESERIES-REGRID MAKE-TIMESERIES MAKE-TIMESERIES-REGRID-P2Y make-timeseries-regrid-P2Y_atmos_4xdaily"    ],
 #   [None             ,"root MAKE-TIMESERIES-P2Y MAKE-TIMESERIES-REGRID MAKE-TIMESERIES MAKE-TIMESERIES-REGRID-P2Y make-timeseries-regrid-P2Y_atmos_daily_cmip" ],
 #   [None             ,"root MAKE-TIMESERIES-P2Y MAKE-TIMESERIES-REGRID MAKE-TIMESERIES MAKE-TIMESERIES-REGRID-P2Y make-timeseries-regrid-P2Y_atmos_month"      ],
##    ["refineDiag"     , None                                                                                                                                    ], #TODO get some sample input for this case
]



def find_clean(hierarchy_list):
    'finds clean in the hierarchy list, ignoring case'
    for entry in hierarchy_list:
        rslt=re.search('clean', entry, re.IGNORECASE)
        if rslt is None:
            continue
        else:
            return True
    return False

def order_by_length(string_a, string_b) :
    if len(string_a)>len(string_b):
        return string_a, string_b
    else:
        return string_b, string_a

def check_lower_char(a):
    'true if a-z'
    return (96<ord(a) and ord(a)<123)

def check_upper_char(a):
    'true if A-Z'
    return (64<ord(a) and ord(a)<91)

def trim_front(str_to_trim):
    'trim str from front until first char is a-z or A-Z'
    firstchar=str_to_trim[0]
    while all([not check_lower_char(firstchar),
               not check_upper_char(firstchar)]):
        str_to_trim=str_to_trim[1:]
        firstchar=str_to_trim[0]
    return str_to_trim

def trim_back(str_to_trim):
    'trim str from back until last char is a-z or A-Z'
    lastchar=str_to_trim[len(str_to_trim)-1]
    while all([not check_lower_char(lastchar),
               not check_upper_char(lastchar)]):
        str_to_trim=str_to_trim[:-1]
        firstchar=str_to_trim[len(str_to_trim)-1]
    return str_to_trim


def extract_component(namespace_hierarchy):
    #first entry in this env var is always "root" which is,
    #by definition, always part of the hierarchy.
    #print(f'namespace_hierarchy={namespace_hierarchy}')
    hierarchy_list=namespace_hierarchy.split(' ')
    hierarchy_list.remove('root')
    if hierarchy_list is None:
        print('WHY IS HIERARCHY LIST NONE??!!')
        return None
    
    len_hierarchy_list=len(hierarchy_list)
    if len(hierarchy_list)==1:
        return hierarchy_list[0]

    if len(hierarchy_list)==2:
        #first look for clean
        if find_clean(hierarchy_list):
            return "clean"

        #then check for a trivial pair like this, usually stage-historyy
        if hierarchy_list[0].lower()==hierarchy_list[1].lower():
            return hierarchy_list[0].lower()

        #refineDiag case might be best handled here:
        #TODO
        

        #then check for mdtf?
        #what abouttttt..... analysis scripts? 

        #check if one is a substring of the other, if so,
        #remove redundant text and trailing non-latin characters
        #return the rest.
        if re.search(hierarchy_list[0],hierarchy_list[1], re.IGNORECASE) is not None:
            longer_one, shortr_one = order_by_length(hierarchy_list[0],hierarchy_list[1])
                              
            #replace instance of shortr_one inside longer_one w/ empty str
            longer_one=re.sub(shortr_one.lower(), "", longer_one.lower())

            ##now remove trailing characters we don't want...
            longer_one=trim_front(longer_one)
            longer_one=trim_back(longer_one)
            
            return longer_one
        
    print(f'list longer than 3')

        #then, if we don't have to worry about those weird special cases
        # now we can check for other things TODO HIGHEST EFFORT


    return None
          

    
    




#testing only
print('\n...entering testing loop...\n')
for pair in test_me_list:
    test_input=pair[1]
    corr_output=pair[0]

    print('...extract_component call...\n')
    test_output=extract_component(test_input)
    if any([corr_output != test_output ,
            test_output is None         ]):
        print(f'booooo, wrong answer: {test_output}\n correct answer: {corr_output}')
    else:
        print(f'yay correct answer: {test_output}')



##real
#import os
#namespace_hierarchy = os.environ['CYLC_TASK_NAMESPACE_HIERARCHY']
#extract_component(namespace_hierarchy)
