#!/usr/bin/env python3
# write-rose-configs
# This script accepts an in-house, so-far-undocumented, extended
# CMOR table format, and writes the Rose app configurations for
# regrid-xy and remap-pp-components.
import argparse
import json
import metomi.rose.config as rose

# Parse arguments
parser = argparse.ArgumentParser()
parser.add_argument('input_files', type=str, nargs='+')
args = parser.parse_args()

def process_file (input_file):
    """Append to regrid-xy and remap-pp-component config files"""

    # Load input file
    print("Reading", input_file)
    f = open(input_file)
    input_json = json.load(f)
    #print(input_json)

    # Load regrid config
    regrid_file = 'app/regrid-xy/rose-app.conf'
    config_node = rose.load(regrid_file)

    # Write info to regrid config
    comp = input_json['Header']['table_id']
    config_node.set([comp, 'inputGrid'], input_json['Header']['inputGrid'])
    config_node.set([comp, 'inputRealm'], input_json['Header']['realm'])
    try:
        xyInterp = input_json['Header']['xyInterp']
    except:
        xyInterp = None
    if xyInterp:
        if xyInterp == "default":
            config_node.set([comp, 'outputGridType'], "default")
        else:
            lat_lon = input_json['Header']['xyInterp'].split(',')
            config_node.set([comp, 'outputGridLat'], lat_lon[0])
            config_node.set([comp, 'outputGridLon'], lat_lon[1])
            config_node.set([comp, 'outputGridType'], lat_lon[0] + '_' + lat_lon[1])
    config_node.set([comp, 'sources'], " ".join(input_json['Header']['history_files']))
    try:
        config_node.set([comp, 'interpMethod'], input_json['Header']['interpMethod'])
    except:
        pass
    #print(config_node)

    # Save regrid config
    f = open(regrid_file, 'w')
    rose.dump(config_node, f)
    print("Wrote", regrid_file)

    # Load remap config
    remap_file = 'app/remap-pp-components/rose-app.conf'
    config_node = rose.load(remap_file)

    # Write info to remap config
    if xyInterp:
        if xyInterp == "default":
            config_node.set([comp, 'grid'], 'regrid-xy/' + 'default')
        else:
            config_node.set([comp, 'grid'], 'regrid-xy/' + lat_lon[0] + '_' + lat_lon[1])
    else:
        config_node.set([comp, 'grid'], 'native')
    config_node.set([comp, 'source'], " ".join(input_json['Header']['history_files']))

    # Save remap config
    f = open(remap_file, 'w')
    rose.dump(config_node, f)
    print("Wrote", remap_file)

for input_file in args.input_files:
    process_file(input_file)
