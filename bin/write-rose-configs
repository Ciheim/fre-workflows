#!/usr/bin/env python3
import argparse
import json
import metomi.rose.config as rose

# Parse arguments
parser = argparse.ArgumentParser()
parser.add_argument('input_file', type=str)
args = parser.parse_args()

# Load input file
f = open(args.input_file)
input_json = json.load(f)
#print(input_json)

# Load regrid config
regrid_file = 'app/regrid-xy/rose-app.conf'
config_node = rose.load(regrid_file)

# Write info to regrid config
comp = input_json['defaults']['table_id']
config_node.set([comp, 'gridSpec'], input_json['defaults']['gridSpec'])
config_node.set([comp, 'inputGrid'], input_json['defaults']['inputGrid'])
config_node.set([comp, 'inputRealm'], input_json['defaults']['realm'])
lat_lon = input_json['defaults']['xyInterp'].split(',')
config_node.set([comp, 'outputGridLat'], lat_lon[0])
config_node.set([comp, 'outputGridLon'], lat_lon[1])
config_node.set([comp, 'outputGridType'], lat_lon[0] + '_' + lat_lon[1])
config_node.set([comp, 'sources'], input_json['defaults']['history_file'])
try:
    config_node.set([comp, 'interpMethod'], input_json['defaults']['interpMethod'])
except:
    pass
#print(config_node)

# Save regrid config
f = open(regrid_file, 'w')
rose.dump(config_node, f)
print("Wrote", regrid_file)

# Load remap config
remap_file = 'app/remap-pp-components/rose-app.conf'
config_node = rose.load(remap_file)

# Write info to remap config
config_node.set([comp, 'grid'], 'regrid-xy-' + lat_lon[0] + '_' + lat_lon[1])
config_node.set([comp, 'source'], input_json['defaults']['history_file'])

# Save remap config
f = open(remap_file, 'w')
rose.dump(config_node, f)
print("Wrote", remap_file)
